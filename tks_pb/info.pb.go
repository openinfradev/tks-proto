//
//Define messages to create new info to TKS-Info service.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: info.proto

package tks_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateCSPInfoRequest is used to create a new CSP Info
type CreateCSPInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract_id is Global Unique MultiCluster ID
	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	// csp_name is a name for users
	CspName string `protobuf:"bytes,2,opt,name=csp_name,json=cspName,proto3" json:"csp_name,omitempty"`
	// auth is an optional. This is an authentication info for IaaS.
	Auth string `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	// csp_type is a type of cloud service provider.
	CspType CspType `protobuf:"varint,4,opt,name=csp_type,json=cspType,proto3,enum=tks_pb.CspType" json:"csp_type,omitempty"`
}

func (x *CreateCSPInfoRequest) Reset() {
	*x = CreateCSPInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCSPInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCSPInfoRequest) ProtoMessage() {}

func (x *CreateCSPInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCSPInfoRequest.ProtoReflect.Descriptor instead.
func (*CreateCSPInfoRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCSPInfoRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *CreateCSPInfoRequest) GetCspName() string {
	if x != nil {
		return x.CspName
	}
	return ""
}

func (x *CreateCSPInfoRequest) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *CreateCSPInfoRequest) GetCspType() CspType {
	if x != nil {
		return x.CspType
	}
	return CspType_CSPTYPE_UNSPECIFIED
}

// GetCSPInfoResponse is used to get info of csp
type GetCSPInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is a response code.
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=tks_pb.Code" json:"code,omitempty"`
	// error is a detailed error message.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// contract_id is a contract ID.
	ContractId string `protobuf:"bytes,3,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	// csp_name is a name for users
	CspName string `protobuf:"bytes,4,opt,name=csp_name,json=cspName,proto3" json:"csp_name,omitempty"`
	// auth is an optional. This is an authentication info for IaaS.
	Auth string `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth,omitempty"`
	// csp_type is a type of cloud service provider.
	CspType CspType `protobuf:"varint,6,opt,name=csp_type,json=cspType,proto3,enum=tks_pb.CspType" json:"csp_type,omitempty"`
}

func (x *GetCSPInfoResponse) Reset() {
	*x = GetCSPInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCSPInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCSPInfoResponse) ProtoMessage() {}

func (x *GetCSPInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCSPInfoResponse.ProtoReflect.Descriptor instead.
func (*GetCSPInfoResponse) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{1}
}

func (x *GetCSPInfoResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK_UNSPECIFIED
}

func (x *GetCSPInfoResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetCSPInfoResponse) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *GetCSPInfoResponse) GetCspName() string {
	if x != nil {
		return x.CspName
	}
	return ""
}

func (x *GetCSPInfoResponse) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *GetCSPInfoResponse) GetCspType() CspType {
	if x != nil {
		return x.CspType
	}
	return CspType_CSPTYPE_UNSPECIFIED
}

// GetCSPAuthResponse is used to get an authentication information by
//   csp id.
type GetCSPAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is a response code.
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=tks_pb.Code" json:"code,omitempty"`
	// error is a detailed error message.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// auth is an authentication info stiringified in JSON.
	Auth string `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetCSPAuthResponse) Reset() {
	*x = GetCSPAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCSPAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCSPAuthResponse) ProtoMessage() {}

func (x *GetCSPAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCSPAuthResponse.ProtoReflect.Descriptor instead.
func (*GetCSPAuthResponse) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{2}
}

func (x *GetCSPAuthResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK_UNSPECIFIED
}

func (x *GetCSPAuthResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetCSPAuthResponse) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

// UpdateCSPAuthRequest updates an authenticationg information for CSP.
type UpdateCSPAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// csp_id is .
	CspId string `protobuf:"bytes,1,opt,name=csp_id,json=cspId,proto3" json:"csp_id,omitempty"`
	// auth is an authentication info to update.
	Auth string `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *UpdateCSPAuthRequest) Reset() {
	*x = UpdateCSPAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCSPAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCSPAuthRequest) ProtoMessage() {}

func (x *UpdateCSPAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCSPAuthRequest.ProtoReflect.Descriptor instead.
func (*UpdateCSPAuthRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateCSPAuthRequest) GetCspId() string {
	if x != nil {
		return x.CspId
	}
	return ""
}

func (x *UpdateCSPAuthRequest) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

// AddClusterInfoRequest is used to add a new cluster info
type AddClusterInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract_id is a contract ID.
	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	// csp_id is an ID of CSPInfo.
	CspId string `protobuf:"bytes,2,opt,name=csp_id,json=cspId,proto3" json:"csp_id,omitempty"`
	// cluster_name is a cluster name defined by users
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// conf is a cluster configuration
	Conf *ClusterConf `protobuf:"bytes,4,opt,name=conf,proto3" json:"conf,omitempty"`
}

func (x *AddClusterInfoRequest) Reset() {
	*x = AddClusterInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddClusterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterInfoRequest) ProtoMessage() {}

func (x *AddClusterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterInfoRequest.ProtoReflect.Descriptor instead.
func (*AddClusterInfoRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{4}
}

func (x *AddClusterInfoRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *AddClusterInfoRequest) GetCspId() string {
	if x != nil {
		return x.CspId
	}
	return ""
}

func (x *AddClusterInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddClusterInfoRequest) GetConf() *ClusterConf {
	if x != nil {
		return x.Conf
	}
	return nil
}

// UpdateClusterConfRequest is used to update kubernetes cluster configuration
// to correspond with id
type UpdateClusterConfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_id is a cluster ID
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// conf is a kubernetes cluster configuration
	Conf *ClusterConf `protobuf:"bytes,2,opt,name=conf,proto3" json:"conf,omitempty"`
}

func (x *UpdateClusterConfRequest) Reset() {
	*x = UpdateClusterConfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterConfRequest) ProtoMessage() {}

func (x *UpdateClusterConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterConfRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterConfRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateClusterConfRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterConfRequest) GetConf() *ClusterConf {
	if x != nil {
		return x.Conf
	}
	return nil
}

// GetClusterRequest is used to get info of MultiCluster to correspond with id
type GetClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_id is a cluster ID
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{6}
}

func (x *GetClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// GetClusterResponse contains a cluster info.
type GetClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is a response code.
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=tks_pb.Code" json:"code,omitempty"`
	// error is a detailed error message.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// cluster is info for the cluster
	Cluster *Cluster `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *GetClusterResponse) Reset() {
	*x = GetClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterResponse) ProtoMessage() {}

func (x *GetClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterResponse.ProtoReflect.Descriptor instead.
func (*GetClusterResponse) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{7}
}

func (x *GetClusterResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK_UNSPECIFIED
}

func (x *GetClusterResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// GetClustersRequest returns a list of clusters in specific CSP.
type GetClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// csp_id is a Global Unique ID
	CspId string `protobuf:"bytes,1,opt,name=csp_id,json=cspId,proto3" json:"csp_id,omitempty"`
	// Unique contract ID
	ContractId string `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
}

func (x *GetClustersRequest) Reset() {
	*x = GetClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClustersRequest) ProtoMessage() {}

func (x *GetClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClustersRequest.ProtoReflect.Descriptor instead.
func (*GetClustersRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{8}
}

func (x *GetClustersRequest) GetCspId() string {
	if x != nil {
		return x.CspId
	}
	return ""
}

func (x *GetClustersRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

// GetClustersResponse contains an array of cluster infos.
type GetClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is a response code.
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=tks_pb.Code" json:"code,omitempty"`
	// error is a detailed error message.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// cluster is info. for the cluster
	Clusters []*Cluster `protobuf:"bytes,3,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *GetClustersResponse) Reset() {
	*x = GetClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClustersResponse) ProtoMessage() {}

func (x *GetClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClustersResponse.ProtoReflect.Descriptor instead.
func (*GetClustersResponse) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{9}
}

func (x *GetClustersResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK_UNSPECIFIED
}

func (x *GetClustersResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// UpdateClusterStatusRequest is used to change status of the cluster
type UpdateClusterStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_id is a cluster ID
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// status is the clusterstatus to be changed
	Status ClusterStatus `protobuf:"varint,2,opt,name=status,proto3,enum=tks_pb.ClusterStatus" json:"status,omitempty"`
	// status_desc is a detail message of cluster status.
	StatusDesc string `protobuf:"bytes,3,opt,name=status_desc,json=statusDesc,proto3" json:"status_desc,omitempty"`
	// workflow_id is a argo workflow ID(name)
	WorkflowId string `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *UpdateClusterStatusRequest) Reset() {
	*x = UpdateClusterStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterStatusRequest) ProtoMessage() {}

func (x *UpdateClusterStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterStatusRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateClusterStatusRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterStatusRequest) GetStatus() ClusterStatus {
	if x != nil {
		return x.Status
	}
	return ClusterStatus_UNSPECIFIED
}

func (x *UpdateClusterStatusRequest) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

func (x *UpdateClusterStatusRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

// CreateAppGroupRequest is used to create a new app group.
type CreateAppGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_id is a cluster ID
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// app_group is an application group
	AppGroup *AppGroup `protobuf:"bytes,2,opt,name=app_group,json=appGroup,proto3" json:"app_group,omitempty"`
}

func (x *CreateAppGroupRequest) Reset() {
	*x = CreateAppGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppGroupRequest) ProtoMessage() {}

func (x *CreateAppGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateAppGroupRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{11}
}

func (x *CreateAppGroupRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateAppGroupRequest) GetAppGroup() *AppGroup {
	if x != nil {
		return x.AppGroup
	}
	return nil
}

// DeleteAppGroupRequest is used to delete app group.
type DeleteAppGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_group_id is an app group id to delete.
	AppGroupId string `protobuf:"bytes,1,opt,name=app_group_id,json=appGroupId,proto3" json:"app_group_id,omitempty"`
}

func (x *DeleteAppGroupRequest) Reset() {
	*x = DeleteAppGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppGroupRequest) ProtoMessage() {}

func (x *DeleteAppGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppGroupRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteAppGroupRequest) GetAppGroupId() string {
	if x != nil {
		return x.AppGroupId
	}
	return ""
}

// GetAppGroupsRequest is used to get an array of application infos on cluster
type GetAppGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_name is a name of the application
	AppGroupName string `protobuf:"bytes,1,opt,name=app_group_name,json=appGroupName,proto3" json:"app_group_name,omitempty"`
	// app_type is a type of the application
	Type AppGroupType `protobuf:"varint,2,opt,name=type,proto3,enum=tks_pb.AppGroupType" json:"type,omitempty"`
}

func (x *GetAppGroupsRequest) Reset() {
	*x = GetAppGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGroupsRequest) ProtoMessage() {}

func (x *GetAppGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetAppGroupsRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{13}
}

func (x *GetAppGroupsRequest) GetAppGroupName() string {
	if x != nil {
		return x.AppGroupName
	}
	return ""
}

func (x *GetAppGroupsRequest) GetType() AppGroupType {
	if x != nil {
		return x.Type
	}
	return AppGroupType_APP_TYPE_UNSPECIFIED
}

// GetAppGroupRequest returns an array of application groups on the cluster
type GetAppGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_group_id is an id of the application group
	AppGroupId string `protobuf:"bytes,1,opt,name=app_group_id,json=appGroupId,proto3" json:"app_group_id,omitempty"`
}

func (x *GetAppGroupRequest) Reset() {
	*x = GetAppGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGroupRequest) ProtoMessage() {}

func (x *GetAppGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGroupRequest.ProtoReflect.Descriptor instead.
func (*GetAppGroupRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{14}
}

func (x *GetAppGroupRequest) GetAppGroupId() string {
	if x != nil {
		return x.AppGroupId
	}
	return ""
}

// GetAppGroupResponse contains an array of application groups.
type GetAppGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is a response code.
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=tks_pb.Code" json:"code,omitempty"`
	// error is a detailed error message.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// app_group is an application group
	AppGroup *AppGroup `protobuf:"bytes,3,opt,name=app_group,json=appGroup,proto3" json:"app_group,omitempty"`
}

func (x *GetAppGroupResponse) Reset() {
	*x = GetAppGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGroupResponse) ProtoMessage() {}

func (x *GetAppGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGroupResponse.ProtoReflect.Descriptor instead.
func (*GetAppGroupResponse) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{15}
}

func (x *GetAppGroupResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK_UNSPECIFIED
}

func (x *GetAppGroupResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAppGroupResponse) GetAppGroup() *AppGroup {
	if x != nil {
		return x.AppGroup
	}
	return nil
}

// GetAppGroupsResponse contains an array of application infos.
type GetAppGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is a response code.
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=tks_pb.Code" json:"code,omitempty"`
	// error is a detailed error message.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// app_groups is an array of applications
	AppGroups []*AppGroup `protobuf:"bytes,3,rep,name=app_groups,json=appGroups,proto3" json:"app_groups,omitempty"`
}

func (x *GetAppGroupsResponse) Reset() {
	*x = GetAppGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGroupsResponse) ProtoMessage() {}

func (x *GetAppGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetAppGroupsResponse) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{16}
}

func (x *GetAppGroupsResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK_UNSPECIFIED
}

func (x *GetAppGroupsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAppGroupsResponse) GetAppGroups() []*AppGroup {
	if x != nil {
		return x.AppGroups
	}
	return nil
}

// UpdateAppGroupStatusRequest is used to change the status of the app
type UpdateAppGroupStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_group_id is the application group id to change the status
	AppGroupId string `protobuf:"bytes,1,opt,name=app_group_id,json=appGroupId,proto3" json:"app_group_id,omitempty"`
	// status is a AppStatus of the application
	Status AppGroupStatus `protobuf:"varint,2,opt,name=status,proto3,enum=tks_pb.AppGroupStatus" json:"status,omitempty"`
	// status_desc is a detail message of cluster status.
	StatusDesc string `protobuf:"bytes,3,opt,name=status_desc,json=statusDesc,proto3" json:"status_desc,omitempty"`
	// workflow_id is a argo workflow ID(name)
	WorkflowId string `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *UpdateAppGroupStatusRequest) Reset() {
	*x = UpdateAppGroupStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppGroupStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppGroupStatusRequest) ProtoMessage() {}

func (x *UpdateAppGroupStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppGroupStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppGroupStatusRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateAppGroupStatusRequest) GetAppGroupId() string {
	if x != nil {
		return x.AppGroupId
	}
	return ""
}

func (x *UpdateAppGroupStatusRequest) GetStatus() AppGroupStatus {
	if x != nil {
		return x.Status
	}
	return AppGroupStatus_APP_GROUP_UNSPECIFIED
}

func (x *UpdateAppGroupStatusRequest) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

func (x *UpdateAppGroupStatusRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

// UpdateAppRequest updates an information of application such as endpoints.
type UpdateAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_group_id is the application group id.
	AppGroupId string `protobuf:"bytes,1,opt,name=app_group_id,json=appGroupId,proto3" json:"app_group_id,omitempty"`
	// app_type is a type of the application
	AppType AppType `protobuf:"varint,2,opt,name=app_type,json=appType,proto3,enum=tks_pb.AppType" json:"app_type,omitempty"`
	// endpoints is an endpoint string.
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// metadata is an unstructured metadata for application.
	Metadata string `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *UpdateAppRequest) Reset() {
	*x = UpdateAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppRequest) ProtoMessage() {}

func (x *UpdateAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateAppRequest) GetAppGroupId() string {
	if x != nil {
		return x.AppGroupId
	}
	return ""
}

func (x *UpdateAppRequest) GetAppType() AppType {
	if x != nil {
		return x.AppType
	}
	return AppType_EP_UNSPECIFIED
}

func (x *UpdateAppRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *UpdateAppRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// GetAppsRequest returns an array of applications
type GetAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_group_id is a name of the application
	AppGroupId string `protobuf:"bytes,1,opt,name=app_group_id,json=appGroupId,proto3" json:"app_group_id,omitempty"`
	// app_type is a type of the application
	Type AppType `protobuf:"varint,2,opt,name=type,proto3,enum=tks_pb.AppType" json:"type,omitempty"`
}

func (x *GetAppsRequest) Reset() {
	*x = GetAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppsRequest) ProtoMessage() {}

func (x *GetAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppsRequest.ProtoReflect.Descriptor instead.
func (*GetAppsRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{19}
}

func (x *GetAppsRequest) GetAppGroupId() string {
	if x != nil {
		return x.AppGroupId
	}
	return ""
}

func (x *GetAppsRequest) GetType() AppType {
	if x != nil {
		return x.Type
	}
	return AppType_EP_UNSPECIFIED
}

// GetAppsResponse returns an array of applications.
type GetAppsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is a response code.
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=tks_pb.Code" json:"code,omitempty"`
	// error is a detailed error message.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// app_groups is an array of applications
	Apps []*Application `protobuf:"bytes,3,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *GetAppsResponse) Reset() {
	*x = GetAppsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppsResponse) ProtoMessage() {}

func (x *GetAppsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppsResponse.ProtoReflect.Descriptor instead.
func (*GetAppsResponse) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{20}
}

func (x *GetAppsResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK_UNSPECIFIED
}

func (x *GetAppsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAppsResponse) GetApps() []*Application {
	if x != nil {
		return x.Apps
	}
	return nil
}

// CreateKeycloakInfoRequest is used to create a new keycloak Info
type CreateKeycloakInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id for cluster
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Realm
	Realm string `protobuf:"bytes,2,opt,name=realm,proto3" json:"realm,omitempty"`
	// Client Id
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Secret
	Secret string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	// Private key
	PrivateKey string `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *CreateKeycloakInfoRequest) Reset() {
	*x = CreateKeycloakInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeycloakInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeycloakInfoRequest) ProtoMessage() {}

func (x *CreateKeycloakInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeycloakInfoRequest.ProtoReflect.Descriptor instead.
func (*CreateKeycloakInfoRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{21}
}

func (x *CreateKeycloakInfoRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateKeycloakInfoRequest) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *CreateKeycloakInfoRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateKeycloakInfoRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *CreateKeycloakInfoRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

// GetKeycloakInfoResponse returns an array of keycloak infos
type GetKeycloakInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is a response code.
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=tks_pb.Code" json:"code,omitempty"`
	// orror is a detailed error message.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// keycloakInfos is a detailed keycloak info.
	KeycloakInfos []*KeycloakInfo `protobuf:"bytes,3,rep,name=keycloak_infos,json=keycloakInfos,proto3" json:"keycloak_infos,omitempty"`
}

func (x *GetKeycloakInfoResponse) Reset() {
	*x = GetKeycloakInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeycloakInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeycloakInfoResponse) ProtoMessage() {}

func (x *GetKeycloakInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeycloakInfoResponse.ProtoReflect.Descriptor instead.
func (*GetKeycloakInfoResponse) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{22}
}

func (x *GetKeycloakInfoResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK_UNSPECIFIED
}

func (x *GetKeycloakInfoResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetKeycloakInfoResponse) GetKeycloakInfos() []*KeycloakInfo {
	if x != nil {
		return x.KeycloakInfos
	}
	return nil
}

// CreateAppServeAppRequest is used to add a new application by app-serving service.
type CreateAppServeAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string contract_id;
	App *AppServeApp `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *CreateAppServeAppRequest) Reset() {
	*x = CreateAppServeAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppServeAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppServeAppRequest) ProtoMessage() {}

func (x *CreateAppServeAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppServeAppRequest.ProtoReflect.Descriptor instead.
func (*CreateAppServeAppRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{23}
}

func (x *CreateAppServeAppRequest) GetApp() *AppServeApp {
	if x != nil {
		return x.App
	}
	return nil
}

type UpdateAppServeAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppServeAppId string       `protobuf:"bytes,1,opt,name=app_serve_app_id,json=appServeAppId,proto3" json:"app_serve_app_id,omitempty"`
	App           *AppServeApp `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *UpdateAppServeAppRequest) Reset() {
	*x = UpdateAppServeAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppServeAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppServeAppRequest) ProtoMessage() {}

func (x *UpdateAppServeAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppServeAppRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppServeAppRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateAppServeAppRequest) GetAppServeAppId() string {
	if x != nil {
		return x.AppServeAppId
	}
	return ""
}

func (x *UpdateAppServeAppRequest) GetApp() *AppServeApp {
	if x != nil {
		return x.App
	}
	return nil
}

type GetAppServeAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
}

func (x *GetAppServeAppsRequest) Reset() {
	*x = GetAppServeAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppServeAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppServeAppsRequest) ProtoMessage() {}

func (x *GetAppServeAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppServeAppsRequest.ProtoReflect.Descriptor instead.
func (*GetAppServeAppsRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{25}
}

func (x *GetAppServeAppsRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

type GetAppServeAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId    string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	AppServeAppId string `protobuf:"bytes,2,opt,name=app_serve_app_id,json=appServeAppId,proto3" json:"app_serve_app_id,omitempty"`
}

func (x *GetAppServeAppRequest) Reset() {
	*x = GetAppServeAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppServeAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppServeAppRequest) ProtoMessage() {}

func (x *GetAppServeAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppServeAppRequest.ProtoReflect.Descriptor instead.
func (*GetAppServeAppRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{26}
}

func (x *GetAppServeAppRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *GetAppServeAppRequest) GetAppServeAppId() string {
	if x != nil {
		return x.AppServeAppId
	}
	return ""
}

type GetAppServeAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is a response code.
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=tks_pb.Code" json:"code,omitempty"`
	// error is a detailed error message.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// cluster is info for the cluster
	App *AppServeApp `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *GetAppServeAppResponse) Reset() {
	*x = GetAppServeAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppServeAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppServeAppResponse) ProtoMessage() {}

func (x *GetAppServeAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppServeAppResponse.ProtoReflect.Descriptor instead.
func (*GetAppServeAppResponse) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{27}
}

func (x *GetAppServeAppResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK_UNSPECIFIED
}

func (x *GetAppServeAppResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAppServeAppResponse) GetApp() *AppServeApp {
	if x != nil {
		return x.App
	}
	return nil
}

type GetAppServeAppsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is a response code.
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=tks_pb.Code" json:"code,omitempty"`
	// error is a detailed error message.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// cluster is info. for the cluster
	Apps []*AppServeApp `protobuf:"bytes,3,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *GetAppServeAppsResponse) Reset() {
	*x = GetAppServeAppsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppServeAppsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppServeAppsResponse) ProtoMessage() {}

func (x *GetAppServeAppsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppServeAppsResponse.ProtoReflect.Descriptor instead.
func (*GetAppServeAppsResponse) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{28}
}

func (x *GetAppServeAppsResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK_UNSPECIFIED
}

func (x *GetAppServeAppsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAppServeAppsResponse) GetApps() []*AppServeApp {
	if x != nil {
		return x.Apps
	}
	return nil
}

type UpdateAppServeAppStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppServeAppId string `protobuf:"bytes,1,opt,name=app_serve_app_id,json=appServeAppId,proto3" json:"app_serve_app_id,omitempty"`
	Status        string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Output        string `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *UpdateAppServeAppStatusRequest) Reset() {
	*x = UpdateAppServeAppStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppServeAppStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppServeAppStatusRequest) ProtoMessage() {}

func (x *UpdateAppServeAppStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppServeAppStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppServeAppStatusRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateAppServeAppStatusRequest) GetAppServeAppId() string {
	if x != nil {
		return x.AppServeAppId
	}
	return ""
}

func (x *UpdateAppServeAppStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateAppServeAppStatusRequest) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type UpdateAppServeAppEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppServeAppId string `protobuf:"bytes,1,opt,name=app_serve_app_id,json=appServeAppId,proto3" json:"app_serve_app_id,omitempty"`
	Endpoint      string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *UpdateAppServeAppEndpointRequest) Reset() {
	*x = UpdateAppServeAppEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppServeAppEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppServeAppEndpointRequest) ProtoMessage() {}

func (x *UpdateAppServeAppEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppServeAppEndpointRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppServeAppEndpointRequest) Descriptor() ([]byte, []int) {
	return file_info_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateAppServeAppEndpointRequest) GetAppServeAppId() string {
	if x != nil {
		return x.AppServeAppId
	}
	return ""
}

func (x *UpdateAppServeAppEndpointRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

var File_info_proto protoreflect.FileDescriptor

var file_info_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x6b,
	0x73, 0x5f, 0x70, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x92, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x53, 0x50, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x73, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x6b, 0x73,
	0x5f, 0x70, 0x62, 0x2e, 0x43, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x73, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x53, 0x50, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x6b, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x73, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x73,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6f,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x53, 0x50, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22,
	0x41, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x53, 0x50, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x73, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x73, 0x70, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x63, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x73, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x04, 0x63, 0x6f, 0x6e,
	0x66, 0x22, 0x62, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04,
	0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6b, 0x73,
	0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x04, 0x63, 0x6f, 0x6e, 0x66, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x22, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x73, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x73, 0x70, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x22, 0x89, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6b, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xac, 0x01, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x6b, 0x73,
	0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x39, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x65, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x61,
	0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x08, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22,
	0x98, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74,
	0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27,
	0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x22, 0x9d, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x6b, 0x73,
	0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6b,
	0x73, 0x5f, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x22, 0x41, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x03,
	0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6b, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x03,
	0x61, 0x70, 0x70, 0x22, 0x6a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22,
	0x39, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x86, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6b, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x25, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x70, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x04, 0x61, 0x70,
	0x70, 0x73, 0x22, 0x79, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x67, 0x0a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41,
	0x70, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x92, 0x03, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x20, 0x2e, 0x74, 0x6b, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x6b,
	0x73, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x6b,
	0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e,
	0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x9b, 0x03, 0x0a, 0x0e,
	0x43, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x53, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x53, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x53, 0x50, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x11, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x53, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x53, 0x50, 0x49, 0x44, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62,
	0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x53, 0x50, 0x49, 0x44, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x11, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62,
	0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x6b, 0x73,
	0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x53, 0x50, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x1c, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x53, 0x50, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x43, 0x53, 0x50, 0x41, 0x75, 0x74, 0x68, 0x12, 0x11, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x6b,
	0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x53, 0x50, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa2, 0x05, 0x0a, 0x0e, 0x41, 0x70,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d,
	0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x11,
	0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x1b, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x2e,
	0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x6b, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1d, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x12, 0x11, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x16, 0x2e, 0x74, 0x6b, 0x73,
	0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x12, 0x18, 0x2e, 0x74, 0x6b, 0x73,
	0x5f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x99,
	0x04, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x12, 0x20, 0x2e, 0x74, 0x6b, 0x73,
	0x5f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74,
	0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x12, 0x20, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x6b, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x41, 0x70, 0x70, 0x12, 0x1d, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x73, 0x12, 0x1e, 0x2e, 0x74, 0x6b, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x6b, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xbe, 0x02, 0x0a, 0x13, 0x4b,
	0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x63,
	0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x6b,
	0x73, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x11, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x74, 0x6b,
	0x73, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11,
	0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x64, 0x65, 0x76, 0x2f, 0x74, 0x6b, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x74, 0x6b, 0x73, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_info_proto_rawDescOnce sync.Once
	file_info_proto_rawDescData = file_info_proto_rawDesc
)

func file_info_proto_rawDescGZIP() []byte {
	file_info_proto_rawDescOnce.Do(func() {
		file_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_proto_rawDescData)
	})
	return file_info_proto_rawDescData
}

var file_info_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_info_proto_goTypes = []interface{}{
	(*CreateCSPInfoRequest)(nil),             // 0: tks_pb.CreateCSPInfoRequest
	(*GetCSPInfoResponse)(nil),               // 1: tks_pb.GetCSPInfoResponse
	(*GetCSPAuthResponse)(nil),               // 2: tks_pb.GetCSPAuthResponse
	(*UpdateCSPAuthRequest)(nil),             // 3: tks_pb.UpdateCSPAuthRequest
	(*AddClusterInfoRequest)(nil),            // 4: tks_pb.AddClusterInfoRequest
	(*UpdateClusterConfRequest)(nil),         // 5: tks_pb.UpdateClusterConfRequest
	(*GetClusterRequest)(nil),                // 6: tks_pb.GetClusterRequest
	(*GetClusterResponse)(nil),               // 7: tks_pb.GetClusterResponse
	(*GetClustersRequest)(nil),               // 8: tks_pb.GetClustersRequest
	(*GetClustersResponse)(nil),              // 9: tks_pb.GetClustersResponse
	(*UpdateClusterStatusRequest)(nil),       // 10: tks_pb.UpdateClusterStatusRequest
	(*CreateAppGroupRequest)(nil),            // 11: tks_pb.CreateAppGroupRequest
	(*DeleteAppGroupRequest)(nil),            // 12: tks_pb.DeleteAppGroupRequest
	(*GetAppGroupsRequest)(nil),              // 13: tks_pb.GetAppGroupsRequest
	(*GetAppGroupRequest)(nil),               // 14: tks_pb.GetAppGroupRequest
	(*GetAppGroupResponse)(nil),              // 15: tks_pb.GetAppGroupResponse
	(*GetAppGroupsResponse)(nil),             // 16: tks_pb.GetAppGroupsResponse
	(*UpdateAppGroupStatusRequest)(nil),      // 17: tks_pb.UpdateAppGroupStatusRequest
	(*UpdateAppRequest)(nil),                 // 18: tks_pb.UpdateAppRequest
	(*GetAppsRequest)(nil),                   // 19: tks_pb.GetAppsRequest
	(*GetAppsResponse)(nil),                  // 20: tks_pb.GetAppsResponse
	(*CreateKeycloakInfoRequest)(nil),        // 21: tks_pb.CreateKeycloakInfoRequest
	(*GetKeycloakInfoResponse)(nil),          // 22: tks_pb.GetKeycloakInfoResponse
	(*CreateAppServeAppRequest)(nil),         // 23: tks_pb.CreateAppServeAppRequest
	(*UpdateAppServeAppRequest)(nil),         // 24: tks_pb.UpdateAppServeAppRequest
	(*GetAppServeAppsRequest)(nil),           // 25: tks_pb.GetAppServeAppsRequest
	(*GetAppServeAppRequest)(nil),            // 26: tks_pb.GetAppServeAppRequest
	(*GetAppServeAppResponse)(nil),           // 27: tks_pb.GetAppServeAppResponse
	(*GetAppServeAppsResponse)(nil),          // 28: tks_pb.GetAppServeAppsResponse
	(*UpdateAppServeAppStatusRequest)(nil),   // 29: tks_pb.UpdateAppServeAppStatusRequest
	(*UpdateAppServeAppEndpointRequest)(nil), // 30: tks_pb.UpdateAppServeAppEndpointRequest
	(CspType)(0),                             // 31: tks_pb.CspType
	(Code)(0),                                // 32: tks_pb.Code
	(*Error)(nil),                            // 33: tks_pb.Error
	(*ClusterConf)(nil),                      // 34: tks_pb.ClusterConf
	(*Cluster)(nil),                          // 35: tks_pb.Cluster
	(ClusterStatus)(0),                       // 36: tks_pb.ClusterStatus
	(*AppGroup)(nil),                         // 37: tks_pb.AppGroup
	(AppGroupType)(0),                        // 38: tks_pb.AppGroupType
	(AppGroupStatus)(0),                      // 39: tks_pb.AppGroupStatus
	(AppType)(0),                             // 40: tks_pb.AppType
	(*Application)(nil),                      // 41: tks_pb.Application
	(*KeycloakInfo)(nil),                     // 42: tks_pb.KeycloakInfo
	(*AppServeApp)(nil),                      // 43: tks_pb.AppServeApp
	(*IDRequest)(nil),                        // 44: tks_pb.IDRequest
	(*emptypb.Empty)(nil),                    // 45: google.protobuf.Empty
	(*IDResponse)(nil),                       // 46: tks_pb.IDResponse
	(*SimpleResponse)(nil),                   // 47: tks_pb.SimpleResponse
	(*IDsResponse)(nil),                      // 48: tks_pb.IDsResponse
}
var file_info_proto_depIdxs = []int32{
	31, // 0: tks_pb.CreateCSPInfoRequest.csp_type:type_name -> tks_pb.CspType
	32, // 1: tks_pb.GetCSPInfoResponse.code:type_name -> tks_pb.Code
	33, // 2: tks_pb.GetCSPInfoResponse.error:type_name -> tks_pb.Error
	31, // 3: tks_pb.GetCSPInfoResponse.csp_type:type_name -> tks_pb.CspType
	32, // 4: tks_pb.GetCSPAuthResponse.code:type_name -> tks_pb.Code
	33, // 5: tks_pb.GetCSPAuthResponse.error:type_name -> tks_pb.Error
	34, // 6: tks_pb.AddClusterInfoRequest.conf:type_name -> tks_pb.ClusterConf
	34, // 7: tks_pb.UpdateClusterConfRequest.conf:type_name -> tks_pb.ClusterConf
	32, // 8: tks_pb.GetClusterResponse.code:type_name -> tks_pb.Code
	33, // 9: tks_pb.GetClusterResponse.error:type_name -> tks_pb.Error
	35, // 10: tks_pb.GetClusterResponse.cluster:type_name -> tks_pb.Cluster
	32, // 11: tks_pb.GetClustersResponse.code:type_name -> tks_pb.Code
	33, // 12: tks_pb.GetClustersResponse.error:type_name -> tks_pb.Error
	35, // 13: tks_pb.GetClustersResponse.clusters:type_name -> tks_pb.Cluster
	36, // 14: tks_pb.UpdateClusterStatusRequest.status:type_name -> tks_pb.ClusterStatus
	37, // 15: tks_pb.CreateAppGroupRequest.app_group:type_name -> tks_pb.AppGroup
	38, // 16: tks_pb.GetAppGroupsRequest.type:type_name -> tks_pb.AppGroupType
	32, // 17: tks_pb.GetAppGroupResponse.code:type_name -> tks_pb.Code
	33, // 18: tks_pb.GetAppGroupResponse.error:type_name -> tks_pb.Error
	37, // 19: tks_pb.GetAppGroupResponse.app_group:type_name -> tks_pb.AppGroup
	32, // 20: tks_pb.GetAppGroupsResponse.code:type_name -> tks_pb.Code
	33, // 21: tks_pb.GetAppGroupsResponse.error:type_name -> tks_pb.Error
	37, // 22: tks_pb.GetAppGroupsResponse.app_groups:type_name -> tks_pb.AppGroup
	39, // 23: tks_pb.UpdateAppGroupStatusRequest.status:type_name -> tks_pb.AppGroupStatus
	40, // 24: tks_pb.UpdateAppRequest.app_type:type_name -> tks_pb.AppType
	40, // 25: tks_pb.GetAppsRequest.type:type_name -> tks_pb.AppType
	32, // 26: tks_pb.GetAppsResponse.code:type_name -> tks_pb.Code
	33, // 27: tks_pb.GetAppsResponse.error:type_name -> tks_pb.Error
	41, // 28: tks_pb.GetAppsResponse.apps:type_name -> tks_pb.Application
	32, // 29: tks_pb.GetKeycloakInfoResponse.code:type_name -> tks_pb.Code
	33, // 30: tks_pb.GetKeycloakInfoResponse.error:type_name -> tks_pb.Error
	42, // 31: tks_pb.GetKeycloakInfoResponse.keycloak_infos:type_name -> tks_pb.KeycloakInfo
	43, // 32: tks_pb.CreateAppServeAppRequest.app:type_name -> tks_pb.AppServeApp
	43, // 33: tks_pb.UpdateAppServeAppRequest.app:type_name -> tks_pb.AppServeApp
	32, // 34: tks_pb.GetAppServeAppResponse.code:type_name -> tks_pb.Code
	33, // 35: tks_pb.GetAppServeAppResponse.error:type_name -> tks_pb.Error
	43, // 36: tks_pb.GetAppServeAppResponse.app:type_name -> tks_pb.AppServeApp
	32, // 37: tks_pb.GetAppServeAppsResponse.code:type_name -> tks_pb.Code
	33, // 38: tks_pb.GetAppServeAppsResponse.error:type_name -> tks_pb.Error
	43, // 39: tks_pb.GetAppServeAppsResponse.apps:type_name -> tks_pb.AppServeApp
	4,  // 40: tks_pb.ClusterInfoService.AddClusterInfo:input_type -> tks_pb.AddClusterInfoRequest
	5,  // 41: tks_pb.ClusterInfoService.UpdateClusterConf:input_type -> tks_pb.UpdateClusterConfRequest
	6,  // 42: tks_pb.ClusterInfoService.GetCluster:input_type -> tks_pb.GetClusterRequest
	8,  // 43: tks_pb.ClusterInfoService.GetClusters:input_type -> tks_pb.GetClustersRequest
	10, // 44: tks_pb.ClusterInfoService.UpdateClusterStatus:input_type -> tks_pb.UpdateClusterStatusRequest
	0,  // 45: tks_pb.CspInfoService.CreateCSPInfo:input_type -> tks_pb.CreateCSPInfoRequest
	44, // 46: tks_pb.CspInfoService.GetCSPInfo:input_type -> tks_pb.IDRequest
	45, // 47: tks_pb.CspInfoService.GetCSPIDs:input_type -> google.protobuf.Empty
	44, // 48: tks_pb.CspInfoService.GetCSPIDsByContractID:input_type -> tks_pb.IDRequest
	3,  // 49: tks_pb.CspInfoService.UpdateCSPAuth:input_type -> tks_pb.UpdateCSPAuthRequest
	44, // 50: tks_pb.CspInfoService.GetCSPAuth:input_type -> tks_pb.IDRequest
	11, // 51: tks_pb.AppInfoService.CreateAppGroup:input_type -> tks_pb.CreateAppGroupRequest
	44, // 52: tks_pb.AppInfoService.GetAppGroupsByClusterID:input_type -> tks_pb.IDRequest
	13, // 53: tks_pb.AppInfoService.GetAppGroups:input_type -> tks_pb.GetAppGroupsRequest
	14, // 54: tks_pb.AppInfoService.GetAppGroup:input_type -> tks_pb.GetAppGroupRequest
	17, // 55: tks_pb.AppInfoService.UpdateAppGroupStatus:input_type -> tks_pb.UpdateAppGroupStatusRequest
	12, // 56: tks_pb.AppInfoService.DeleteAppGroup:input_type -> tks_pb.DeleteAppGroupRequest
	44, // 57: tks_pb.AppInfoService.GetAppsByAppGroupID:input_type -> tks_pb.IDRequest
	19, // 58: tks_pb.AppInfoService.GetApps:input_type -> tks_pb.GetAppsRequest
	18, // 59: tks_pb.AppInfoService.UpdateApp:input_type -> tks_pb.UpdateAppRequest
	23, // 60: tks_pb.AppServeAppService.CreateAppServeApp:input_type -> tks_pb.CreateAppServeAppRequest
	24, // 61: tks_pb.AppServeAppService.UpdateAppServeApp:input_type -> tks_pb.UpdateAppServeAppRequest
	26, // 62: tks_pb.AppServeAppService.GetAppServeApp:input_type -> tks_pb.GetAppServeAppRequest
	25, // 63: tks_pb.AppServeAppService.GetAppServeApps:input_type -> tks_pb.GetAppServeAppsRequest
	29, // 64: tks_pb.AppServeAppService.UpdateAppServeAppStatus:input_type -> tks_pb.UpdateAppServeAppStatusRequest
	30, // 65: tks_pb.AppServeAppService.UpdateAppServeAppEndpoint:input_type -> tks_pb.UpdateAppServeAppEndpointRequest
	21, // 66: tks_pb.KeycloakInfoService.CreateKeycloakInfo:input_type -> tks_pb.CreateKeycloakInfoRequest
	44, // 67: tks_pb.KeycloakInfoService.GetKeycloakInfoByClusterId:input_type -> tks_pb.IDRequest
	44, // 68: tks_pb.KeycloakInfoService.UpdateKeycloakInfo:input_type -> tks_pb.IDRequest
	44, // 69: tks_pb.KeycloakInfoService.DeleteKeycloakInfo:input_type -> tks_pb.IDRequest
	46, // 70: tks_pb.ClusterInfoService.AddClusterInfo:output_type -> tks_pb.IDResponse
	47, // 71: tks_pb.ClusterInfoService.UpdateClusterConf:output_type -> tks_pb.SimpleResponse
	7,  // 72: tks_pb.ClusterInfoService.GetCluster:output_type -> tks_pb.GetClusterResponse
	9,  // 73: tks_pb.ClusterInfoService.GetClusters:output_type -> tks_pb.GetClustersResponse
	47, // 74: tks_pb.ClusterInfoService.UpdateClusterStatus:output_type -> tks_pb.SimpleResponse
	46, // 75: tks_pb.CspInfoService.CreateCSPInfo:output_type -> tks_pb.IDResponse
	1,  // 76: tks_pb.CspInfoService.GetCSPInfo:output_type -> tks_pb.GetCSPInfoResponse
	48, // 77: tks_pb.CspInfoService.GetCSPIDs:output_type -> tks_pb.IDsResponse
	48, // 78: tks_pb.CspInfoService.GetCSPIDsByContractID:output_type -> tks_pb.IDsResponse
	47, // 79: tks_pb.CspInfoService.UpdateCSPAuth:output_type -> tks_pb.SimpleResponse
	2,  // 80: tks_pb.CspInfoService.GetCSPAuth:output_type -> tks_pb.GetCSPAuthResponse
	46, // 81: tks_pb.AppInfoService.CreateAppGroup:output_type -> tks_pb.IDResponse
	16, // 82: tks_pb.AppInfoService.GetAppGroupsByClusterID:output_type -> tks_pb.GetAppGroupsResponse
	16, // 83: tks_pb.AppInfoService.GetAppGroups:output_type -> tks_pb.GetAppGroupsResponse
	15, // 84: tks_pb.AppInfoService.GetAppGroup:output_type -> tks_pb.GetAppGroupResponse
	47, // 85: tks_pb.AppInfoService.UpdateAppGroupStatus:output_type -> tks_pb.SimpleResponse
	47, // 86: tks_pb.AppInfoService.DeleteAppGroup:output_type -> tks_pb.SimpleResponse
	20, // 87: tks_pb.AppInfoService.GetAppsByAppGroupID:output_type -> tks_pb.GetAppsResponse
	20, // 88: tks_pb.AppInfoService.GetApps:output_type -> tks_pb.GetAppsResponse
	47, // 89: tks_pb.AppInfoService.UpdateApp:output_type -> tks_pb.SimpleResponse
	46, // 90: tks_pb.AppServeAppService.CreateAppServeApp:output_type -> tks_pb.IDResponse
	47, // 91: tks_pb.AppServeAppService.UpdateAppServeApp:output_type -> tks_pb.SimpleResponse
	27, // 92: tks_pb.AppServeAppService.GetAppServeApp:output_type -> tks_pb.GetAppServeAppResponse
	28, // 93: tks_pb.AppServeAppService.GetAppServeApps:output_type -> tks_pb.GetAppServeAppsResponse
	47, // 94: tks_pb.AppServeAppService.UpdateAppServeAppStatus:output_type -> tks_pb.SimpleResponse
	47, // 95: tks_pb.AppServeAppService.UpdateAppServeAppEndpoint:output_type -> tks_pb.SimpleResponse
	46, // 96: tks_pb.KeycloakInfoService.CreateKeycloakInfo:output_type -> tks_pb.IDResponse
	22, // 97: tks_pb.KeycloakInfoService.GetKeycloakInfoByClusterId:output_type -> tks_pb.GetKeycloakInfoResponse
	47, // 98: tks_pb.KeycloakInfoService.UpdateKeycloakInfo:output_type -> tks_pb.SimpleResponse
	47, // 99: tks_pb.KeycloakInfoService.DeleteKeycloakInfo:output_type -> tks_pb.SimpleResponse
	70, // [70:100] is the sub-list for method output_type
	40, // [40:70] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_info_proto_init() }
func file_info_proto_init() {
	if File_info_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCSPInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCSPInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCSPAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCSPAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddClusterInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterConfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppGroupStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKeycloakInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeycloakInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppServeAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppServeAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppServeAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppServeAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppServeAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppServeAppsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppServeAppStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppServeAppEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_info_proto_goTypes,
		DependencyIndexes: file_info_proto_depIdxs,
		MessageInfos:      file_info_proto_msgTypes,
	}.Build()
	File_info_proto = out.File
	file_info_proto_rawDesc = nil
	file_info_proto_goTypes = nil
	file_info_proto_depIdxs = nil
}
