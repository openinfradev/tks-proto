// Code generated by MockGen. DO NOT EDIT.
// Source: tks_pb/cluster_lcm_grpc.pb.go

// Package mock_tks_pb is a generated GoMock package.
package mock_tks_pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tks_pb "github.com/openinfradev/tks-proto/tks_pb"
	grpc "google.golang.org/grpc"
)

// MockClusterLcmServiceClient is a mock of ClusterLcmServiceClient interface.
type MockClusterLcmServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterLcmServiceClientMockRecorder
}

// MockClusterLcmServiceClientMockRecorder is the mock recorder for MockClusterLcmServiceClient.
type MockClusterLcmServiceClientMockRecorder struct {
	mock *MockClusterLcmServiceClient
}

// NewMockClusterLcmServiceClient creates a new mock instance.
func NewMockClusterLcmServiceClient(ctrl *gomock.Controller) *MockClusterLcmServiceClient {
	mock := &MockClusterLcmServiceClient{ctrl: ctrl}
	mock.recorder = &MockClusterLcmServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterLcmServiceClient) EXPECT() *MockClusterLcmServiceClientMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockClusterLcmServiceClient) CreateCluster(ctx context.Context, in *tks_pb.CreateClusterRequest, opts ...grpc.CallOption) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCluster", varargs...)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClusterLcmServiceClientMockRecorder) CreateCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClusterLcmServiceClient)(nil).CreateCluster), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockClusterLcmServiceClient) DeleteCluster(ctx context.Context, in *tks_pb.IDRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClusterLcmServiceClientMockRecorder) DeleteCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterLcmServiceClient)(nil).DeleteCluster), varargs...)
}

// ImportCluster mocks base method.
func (m *MockClusterLcmServiceClient) ImportCluster(ctx context.Context, in *tks_pb.ImportClusterRequest, opts ...grpc.CallOption) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportCluster", varargs...)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCluster indicates an expected call of ImportCluster.
func (mr *MockClusterLcmServiceClientMockRecorder) ImportCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCluster", reflect.TypeOf((*MockClusterLcmServiceClient)(nil).ImportCluster), varargs...)
}

// InstallAppGroups mocks base method.
func (m *MockClusterLcmServiceClient) InstallAppGroups(ctx context.Context, in *tks_pb.InstallAppGroupsRequest, opts ...grpc.CallOption) (*tks_pb.IDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstallAppGroups", varargs...)
	ret0, _ := ret[0].(*tks_pb.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallAppGroups indicates an expected call of InstallAppGroups.
func (mr *MockClusterLcmServiceClientMockRecorder) InstallAppGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallAppGroups", reflect.TypeOf((*MockClusterLcmServiceClient)(nil).InstallAppGroups), varargs...)
}

// ScaleCluster mocks base method.
func (m *MockClusterLcmServiceClient) ScaleCluster(ctx context.Context, in *tks_pb.ScaleClusterRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScaleCluster", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleCluster indicates an expected call of ScaleCluster.
func (mr *MockClusterLcmServiceClientMockRecorder) ScaleCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleCluster", reflect.TypeOf((*MockClusterLcmServiceClient)(nil).ScaleCluster), varargs...)
}

// UninstallAppGroups mocks base method.
func (m *MockClusterLcmServiceClient) UninstallAppGroups(ctx context.Context, in *tks_pb.UninstallAppGroupsRequest, opts ...grpc.CallOption) (*tks_pb.IDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UninstallAppGroups", varargs...)
	ret0, _ := ret[0].(*tks_pb.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallAppGroups indicates an expected call of UninstallAppGroups.
func (mr *MockClusterLcmServiceClientMockRecorder) UninstallAppGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallAppGroups", reflect.TypeOf((*MockClusterLcmServiceClient)(nil).UninstallAppGroups), varargs...)
}

// MockClusterLcmServiceServer is a mock of ClusterLcmServiceServer interface.
type MockClusterLcmServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockClusterLcmServiceServerMockRecorder
}

// MockClusterLcmServiceServerMockRecorder is the mock recorder for MockClusterLcmServiceServer.
type MockClusterLcmServiceServerMockRecorder struct {
	mock *MockClusterLcmServiceServer
}

// NewMockClusterLcmServiceServer creates a new mock instance.
func NewMockClusterLcmServiceServer(ctrl *gomock.Controller) *MockClusterLcmServiceServer {
	mock := &MockClusterLcmServiceServer{ctrl: ctrl}
	mock.recorder = &MockClusterLcmServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterLcmServiceServer) EXPECT() *MockClusterLcmServiceServerMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockClusterLcmServiceServer) CreateCluster(arg0 context.Context, arg1 *tks_pb.CreateClusterRequest) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClusterLcmServiceServerMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClusterLcmServiceServer)(nil).CreateCluster), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockClusterLcmServiceServer) DeleteCluster(arg0 context.Context, arg1 *tks_pb.IDRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClusterLcmServiceServerMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterLcmServiceServer)(nil).DeleteCluster), arg0, arg1)
}

// ImportCluster mocks base method.
func (m *MockClusterLcmServiceServer) ImportCluster(arg0 context.Context, arg1 *tks_pb.ImportClusterRequest) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCluster", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCluster indicates an expected call of ImportCluster.
func (mr *MockClusterLcmServiceServerMockRecorder) ImportCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCluster", reflect.TypeOf((*MockClusterLcmServiceServer)(nil).ImportCluster), arg0, arg1)
}

// InstallAppGroups mocks base method.
func (m *MockClusterLcmServiceServer) InstallAppGroups(arg0 context.Context, arg1 *tks_pb.InstallAppGroupsRequest) (*tks_pb.IDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallAppGroups", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallAppGroups indicates an expected call of InstallAppGroups.
func (mr *MockClusterLcmServiceServerMockRecorder) InstallAppGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallAppGroups", reflect.TypeOf((*MockClusterLcmServiceServer)(nil).InstallAppGroups), arg0, arg1)
}

// ScaleCluster mocks base method.
func (m *MockClusterLcmServiceServer) ScaleCluster(arg0 context.Context, arg1 *tks_pb.ScaleClusterRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleCluster", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleCluster indicates an expected call of ScaleCluster.
func (mr *MockClusterLcmServiceServerMockRecorder) ScaleCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleCluster", reflect.TypeOf((*MockClusterLcmServiceServer)(nil).ScaleCluster), arg0, arg1)
}

// UninstallAppGroups mocks base method.
func (m *MockClusterLcmServiceServer) UninstallAppGroups(arg0 context.Context, arg1 *tks_pb.UninstallAppGroupsRequest) (*tks_pb.IDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallAppGroups", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallAppGroups indicates an expected call of UninstallAppGroups.
func (mr *MockClusterLcmServiceServerMockRecorder) UninstallAppGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallAppGroups", reflect.TypeOf((*MockClusterLcmServiceServer)(nil).UninstallAppGroups), arg0, arg1)
}

// mustEmbedUnimplementedClusterLcmServiceServer mocks base method.
func (m *MockClusterLcmServiceServer) mustEmbedUnimplementedClusterLcmServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClusterLcmServiceServer")
}

// mustEmbedUnimplementedClusterLcmServiceServer indicates an expected call of mustEmbedUnimplementedClusterLcmServiceServer.
func (mr *MockClusterLcmServiceServerMockRecorder) mustEmbedUnimplementedClusterLcmServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClusterLcmServiceServer", reflect.TypeOf((*MockClusterLcmServiceServer)(nil).mustEmbedUnimplementedClusterLcmServiceServer))
}

// MockUnsafeClusterLcmServiceServer is a mock of UnsafeClusterLcmServiceServer interface.
type MockUnsafeClusterLcmServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeClusterLcmServiceServerMockRecorder
}

// MockUnsafeClusterLcmServiceServerMockRecorder is the mock recorder for MockUnsafeClusterLcmServiceServer.
type MockUnsafeClusterLcmServiceServerMockRecorder struct {
	mock *MockUnsafeClusterLcmServiceServer
}

// NewMockUnsafeClusterLcmServiceServer creates a new mock instance.
func NewMockUnsafeClusterLcmServiceServer(ctrl *gomock.Controller) *MockUnsafeClusterLcmServiceServer {
	mock := &MockUnsafeClusterLcmServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeClusterLcmServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeClusterLcmServiceServer) EXPECT() *MockUnsafeClusterLcmServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedClusterLcmServiceServer mocks base method.
func (m *MockUnsafeClusterLcmServiceServer) mustEmbedUnimplementedClusterLcmServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClusterLcmServiceServer")
}

// mustEmbedUnimplementedClusterLcmServiceServer indicates an expected call of mustEmbedUnimplementedClusterLcmServiceServer.
func (mr *MockUnsafeClusterLcmServiceServerMockRecorder) mustEmbedUnimplementedClusterLcmServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClusterLcmServiceServer", reflect.TypeOf((*MockUnsafeClusterLcmServiceServer)(nil).mustEmbedUnimplementedClusterLcmServiceServer))
}
