/*
  Define messages to create new info to TKS-Info service. 
*/

syntax = "proto3";
package pbgo;

import "common.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/sktelecom/tks-proto/pbgo";

// ClusterInfoService is a service to manage cluster info document.
service ClusterInfoService {
  // AddClusterInfo adds new cluster information
  rpc AddClusterInfo(AddClusterInfoRequest) returns (IDResponse) {}
  // UpdateClusterConf updates the cluster configuration information
  rpc UpdateClusterConf(UpdateClusterConfRequest) returns (SimpleResponse) {}
  // GetCluster gets cluster info for the id of the cluster
  rpc GetCluster(GetClusterRequest) returns (GetClusterResponse) {}
  // GetClusters get every clusters on the mutlcluster
  rpc GetClusters(GetClustersRequest) returns (GetClustersResponse) {}
  // UpdateClusterStatus update Status of the Cluster
  rpc UpdateClusterStatus(UpdateClusterStatusRequest) 
    returns (SimpleResponse) {}
}

// CspInfoService is a service to manage CSP info document.
service CspInfoService {
  // CreateCSPInfo create new CSP Info for the contract id.
  rpc CreateCSPInfo(CreateCSPInfoRequest) returns (IDResponse) {}
  // GetCSPInfo returns an csp info by csp id.
  rpc GetCSPInfo(IDRequest) returns (GetCSPInfoResponse) {}
  // GetCSPIDs returns all CSP ids.
  rpc GetCSPIDs(google.protobuf.Empty) returns (IDsResponse) {}
  // GetCSPIDsByContractID returns the CSP ids by the contract id.
  rpc GetCSPIDsByContractID(IDRequest) returns (IDsResponse) {}
  // UpdateCSPInfo updates an authentication config for CSP.
  rpc UpdateCSPAuth(UpdateCSPAuthRequest) returns (SimpleResponse) {}
  // GetCSPAuth returns an authentication info by csp id.
  rpc GetCSPAuth(IDRequest) returns (GetCSPAuthResponse) {}
  // AddClusterInfo adds newly created cluster information
}

// AppInfoService is a service to manage Application info document.
service AppInfoService {
  // CreateAppGroup creates a new application group.
  rpc CreateAppGroup(CreateAppGroupRequest) returns (IDResponse) {}
  // GetAppGroupsByClusterID gets an array of app infos By the clusterID
  rpc GetAppGroupsByClusterID(IDRequest) returns (GetAppGroupsResponse) {}
  // GetAppGroups gets an array of app infos by name & type in the cluster
  rpc GetAppGroups(GetAppGroupsRequest) returns (GetAppGroupsResponse) {}
  // GetAppGroup gets an application group by application group ID
  rpc GetAppGroup(GetAppGroupRequest) returns (GetAppGroupResponse) {}
  // UpdateAppGroupStatus updates a status of an application group
  rpc UpdateAppGroupStatus(UpdateAppGroupStatusRequest) returns (
    SimpleResponse) {}
  // DeleteAppGroup deletes an app group.
  rpc DeleteAppGroup(DeleteAppGroupRequest) returns (SimpleResponse) {}
  // GetAppsByClusterID gets applications by application group id.
  rpc GetAppsByAppGroupID(IDRequest) returns (GetAppsResponse) {}
  // GetApps gets applications by application type and application id.
  rpc GetApps(GetAppsRequest) returns (GetAppsResponse) {}
  // UpdateApp updates application data.
  rpc UpdateApp(UpdateAppRequest) returns (SimpleResponse) {}
}

// CreateCSPInfoRequest is used to create a new CSP Info
message CreateCSPInfoRequest {
  // contract_id is Global Unique MultiCluster ID
  string contract_id = 1;
  // csp_name is a name for users
  string csp_name = 2;
  // auth is an optional. This is an authentication info for IaaS.
  string auth = 3;
  // csp_type is a type of cloud service provider.
  CspType csp_type = 4;
}

// GetCSPInfoResponse is used to get info of csp
message GetCSPInfoResponse {
  // code is a response code.
  Code code = 1;
  // error is a detailed error message.
  Error error = 2;
  // contract_id is a contract ID.
  string contract_id = 3;
  // csp_name is a name for users
  string csp_name = 4;
  // auth is an optional. This is an authentication info for IaaS.
  string auth = 5;
  // csp_type is a type of cloud service provider.
  CspType csp_type = 6;
}

// GetCSPAuthResponse is used to get an authentication information by
//   csp id.
message GetCSPAuthResponse {
  // code is a response code.
  Code code = 1;
  // error is a detailed error message.
  Error error = 2;
  // auth is an authentication info stiringified in JSON.
  string auth = 3;
}

// UpdateCSPAuthRequest updates an authenticationg information for CSP.
message UpdateCSPAuthRequest {
  // csp_id is .
  string csp_id = 1;
  // auth is an authentication info to update.
  string auth = 2; 
}

// AddClusterInfoRequest is used to add a new cluster info
message AddClusterInfoRequest {
  // contract_id is a contract ID.
  string contract_id = 1;
  // csp_id is an ID of CSPInfo.
  string csp_id = 2;
  // cluster_name is a cluster name defined by users
  string name = 3;
  // conf is a cluster configuration
  ClusterConf conf = 4;
}

// UpdateClusterConfRequest is used to update kubernetes cluster configuration
// to correspond with id
message UpdateClusterConfRequest {
  // cluster_id is a cluster ID
  string cluster_id = 1;
  // conf is a kubernetes cluster configuration
  ClusterConf conf = 2;
}

// GetClusterRequest is used to get info of MultiCluster to correspond with id
message GetClusterRequest {
  // cluster_id is a cluster ID
  string cluster_id = 1;
}

// GetClusterResponse contains a cluster info.
message GetClusterResponse {
  // code is a response code.
  Code code = 1;
  // error is a detailed error message.
  Error error = 2;
  // cluster is info for the cluster
  Cluster cluster = 3;
}

// GetClustersRequest returns a list of clusters in specific CSP.
message GetClustersRequest {
  // csp_id is a Global Unique ID
  string csp_id = 1;
  // Unique contract ID
  string contract_id = 2;
}

// GetClustersResponse contains an array of cluster infos. 
message GetClustersResponse {
  // code is a response code.
  Code code = 1;
  // error is a detailed error message.
  Error error = 2;
  // cluster is info. for the cluster
  repeated Cluster clusters = 3;
}

// UpdateClusterStatusRequest is used to change status of the cluster
message UpdateClusterStatusRequest {
  // cluster_id is a cluster ID
  string cluster_id = 1;
  // status is the clusterstatus to be changed
  ClusterStatus status = 2;
}

// CreateAppGroupRequest is used to create a new app group.
message CreateAppGroupRequest {
  // cluster_id is a cluster ID
  string cluster_id = 1;
  // app_group is an application group
  AppGroup app_group = 2;
}

// DeleteAppGroupRequest is used to delete app group.
message DeleteAppGroupRequest {
  // app_group_id is an app group id to delete.
  string app_group_id = 1;
}

// GetAppGroupsRequest is used to get an array of application infos on cluster
message GetAppGroupsRequest {
  // app_name is a name of the application
  string app_group_name = 1;
  // app_type is a type of the application
  AppGroupType type = 2;
}

// GetAppGroupRequest returns an array of application groups on the cluster
message GetAppGroupRequest {
  // app_group_id is an id of the application group
  string app_group_id = 1;
}

// GetAppGroupResponse contains an array of application groups. 
message GetAppGroupResponse {
  // code is a response code.
  Code code = 1;
  // error is a detailed error message.
  Error error = 2;
  // app_group is an application group
  AppGroup app_group = 3;
}

// GetAppGroupsResponse contains an array of application infos.
message GetAppGroupsResponse {
  // code is a response code.
  Code code = 1;
  // error is a detailed error message.
  Error error = 2;
  // app_groups is an array of applications
  repeated AppGroup app_groups = 3;
}

// UpdateAppGroupStatusRequest is used to change the status of the app
message UpdateAppGroupStatusRequest {
  // app_group_id is the application group id to change the status
  string app_group_id = 1;
  // status is a AppStatus of the application
  AppGroupStatus status = 2;
}

// UpdateAppRequest updates an information of application such as endpoints.
message UpdateAppRequest {
  // app_group_id is the application group id.
  string app_group_id = 1;
  // app_type is a type of the application
  AppType app_type = 2;
  // endpoints is an endpoint string.
  string endpoint = 3;
  // metadata is an unstructured metadata for application.
  string metadata = 4;
}

// GetAppsRequest returns an array of applications
message GetAppsRequest {
  // app_group_id is a name of the application
  string app_group_id = 1;
  // app_type is a type of the application
  AppType type = 2;
}

// GetAppsResponse returns an array of applications.
message GetAppsResponse {
  // code is a response code.
  Code code = 1;
  // error is a detailed error message.
  Error error = 2;
  // app_groups is an array of applications
  repeated Application apps = 3;
}
