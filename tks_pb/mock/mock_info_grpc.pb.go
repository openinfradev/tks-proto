// Code generated by MockGen. DO NOT EDIT.
// Source: tks_pb/info_grpc.pb.go

// Package mock_tks_pb is a generated GoMock package.
package mock_tks_pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tks_pb "github.com/openinfradev/tks-proto/tks_pb"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockClusterInfoServiceClient is a mock of ClusterInfoServiceClient interface.
type MockClusterInfoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterInfoServiceClientMockRecorder
}

// MockClusterInfoServiceClientMockRecorder is the mock recorder for MockClusterInfoServiceClient.
type MockClusterInfoServiceClientMockRecorder struct {
	mock *MockClusterInfoServiceClient
}

// NewMockClusterInfoServiceClient creates a new mock instance.
func NewMockClusterInfoServiceClient(ctrl *gomock.Controller) *MockClusterInfoServiceClient {
	mock := &MockClusterInfoServiceClient{ctrl: ctrl}
	mock.recorder = &MockClusterInfoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterInfoServiceClient) EXPECT() *MockClusterInfoServiceClientMockRecorder {
	return m.recorder
}

// AddClusterInfo mocks base method.
func (m *MockClusterInfoServiceClient) AddClusterInfo(ctx context.Context, in *tks_pb.AddClusterInfoRequest, opts ...grpc.CallOption) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddClusterInfo", varargs...)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClusterInfo indicates an expected call of AddClusterInfo.
func (mr *MockClusterInfoServiceClientMockRecorder) AddClusterInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterInfo", reflect.TypeOf((*MockClusterInfoServiceClient)(nil).AddClusterInfo), varargs...)
}

// GetCluster mocks base method.
func (m *MockClusterInfoServiceClient) GetCluster(ctx context.Context, in *tks_pb.GetClusterRequest, opts ...grpc.CallOption) (*tks_pb.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClusterInfoServiceClientMockRecorder) GetCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterInfoServiceClient)(nil).GetCluster), varargs...)
}

// GetClusters mocks base method.
func (m *MockClusterInfoServiceClient) GetClusters(ctx context.Context, in *tks_pb.GetClustersRequest, opts ...grpc.CallOption) (*tks_pb.GetClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusters", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusters indicates an expected call of GetClusters.
func (mr *MockClusterInfoServiceClientMockRecorder) GetClusters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusters", reflect.TypeOf((*MockClusterInfoServiceClient)(nil).GetClusters), varargs...)
}

// UpdateClusterConf mocks base method.
func (m *MockClusterInfoServiceClient) UpdateClusterConf(ctx context.Context, in *tks_pb.UpdateClusterConfRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterConf", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConf indicates an expected call of UpdateClusterConf.
func (mr *MockClusterInfoServiceClientMockRecorder) UpdateClusterConf(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConf", reflect.TypeOf((*MockClusterInfoServiceClient)(nil).UpdateClusterConf), varargs...)
}

// UpdateClusterStatus mocks base method.
func (m *MockClusterInfoServiceClient) UpdateClusterStatus(ctx context.Context, in *tks_pb.UpdateClusterStatusRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterStatus", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterStatus indicates an expected call of UpdateClusterStatus.
func (mr *MockClusterInfoServiceClientMockRecorder) UpdateClusterStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatus", reflect.TypeOf((*MockClusterInfoServiceClient)(nil).UpdateClusterStatus), varargs...)
}

// MockClusterInfoServiceServer is a mock of ClusterInfoServiceServer interface.
type MockClusterInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockClusterInfoServiceServerMockRecorder
}

// MockClusterInfoServiceServerMockRecorder is the mock recorder for MockClusterInfoServiceServer.
type MockClusterInfoServiceServerMockRecorder struct {
	mock *MockClusterInfoServiceServer
}

// NewMockClusterInfoServiceServer creates a new mock instance.
func NewMockClusterInfoServiceServer(ctrl *gomock.Controller) *MockClusterInfoServiceServer {
	mock := &MockClusterInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockClusterInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterInfoServiceServer) EXPECT() *MockClusterInfoServiceServerMockRecorder {
	return m.recorder
}

// AddClusterInfo mocks base method.
func (m *MockClusterInfoServiceServer) AddClusterInfo(arg0 context.Context, arg1 *tks_pb.AddClusterInfoRequest) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClusterInfo", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClusterInfo indicates an expected call of AddClusterInfo.
func (mr *MockClusterInfoServiceServerMockRecorder) AddClusterInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterInfo", reflect.TypeOf((*MockClusterInfoServiceServer)(nil).AddClusterInfo), arg0, arg1)
}

// GetCluster mocks base method.
func (m *MockClusterInfoServiceServer) GetCluster(arg0 context.Context, arg1 *tks_pb.GetClusterRequest) (*tks_pb.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClusterInfoServiceServerMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterInfoServiceServer)(nil).GetCluster), arg0, arg1)
}

// GetClusters mocks base method.
func (m *MockClusterInfoServiceServer) GetClusters(arg0 context.Context, arg1 *tks_pb.GetClustersRequest) (*tks_pb.GetClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusters", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusters indicates an expected call of GetClusters.
func (mr *MockClusterInfoServiceServerMockRecorder) GetClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusters", reflect.TypeOf((*MockClusterInfoServiceServer)(nil).GetClusters), arg0, arg1)
}

// UpdateClusterConf mocks base method.
func (m *MockClusterInfoServiceServer) UpdateClusterConf(arg0 context.Context, arg1 *tks_pb.UpdateClusterConfRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterConf", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConf indicates an expected call of UpdateClusterConf.
func (mr *MockClusterInfoServiceServerMockRecorder) UpdateClusterConf(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConf", reflect.TypeOf((*MockClusterInfoServiceServer)(nil).UpdateClusterConf), arg0, arg1)
}

// UpdateClusterStatus mocks base method.
func (m *MockClusterInfoServiceServer) UpdateClusterStatus(arg0 context.Context, arg1 *tks_pb.UpdateClusterStatusRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterStatus", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterStatus indicates an expected call of UpdateClusterStatus.
func (mr *MockClusterInfoServiceServerMockRecorder) UpdateClusterStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatus", reflect.TypeOf((*MockClusterInfoServiceServer)(nil).UpdateClusterStatus), arg0, arg1)
}

// mustEmbedUnimplementedClusterInfoServiceServer mocks base method.
func (m *MockClusterInfoServiceServer) mustEmbedUnimplementedClusterInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClusterInfoServiceServer")
}

// mustEmbedUnimplementedClusterInfoServiceServer indicates an expected call of mustEmbedUnimplementedClusterInfoServiceServer.
func (mr *MockClusterInfoServiceServerMockRecorder) mustEmbedUnimplementedClusterInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClusterInfoServiceServer", reflect.TypeOf((*MockClusterInfoServiceServer)(nil).mustEmbedUnimplementedClusterInfoServiceServer))
}

// MockUnsafeClusterInfoServiceServer is a mock of UnsafeClusterInfoServiceServer interface.
type MockUnsafeClusterInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeClusterInfoServiceServerMockRecorder
}

// MockUnsafeClusterInfoServiceServerMockRecorder is the mock recorder for MockUnsafeClusterInfoServiceServer.
type MockUnsafeClusterInfoServiceServerMockRecorder struct {
	mock *MockUnsafeClusterInfoServiceServer
}

// NewMockUnsafeClusterInfoServiceServer creates a new mock instance.
func NewMockUnsafeClusterInfoServiceServer(ctrl *gomock.Controller) *MockUnsafeClusterInfoServiceServer {
	mock := &MockUnsafeClusterInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeClusterInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeClusterInfoServiceServer) EXPECT() *MockUnsafeClusterInfoServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedClusterInfoServiceServer mocks base method.
func (m *MockUnsafeClusterInfoServiceServer) mustEmbedUnimplementedClusterInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClusterInfoServiceServer")
}

// mustEmbedUnimplementedClusterInfoServiceServer indicates an expected call of mustEmbedUnimplementedClusterInfoServiceServer.
func (mr *MockUnsafeClusterInfoServiceServerMockRecorder) mustEmbedUnimplementedClusterInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClusterInfoServiceServer", reflect.TypeOf((*MockUnsafeClusterInfoServiceServer)(nil).mustEmbedUnimplementedClusterInfoServiceServer))
}

// MockCspInfoServiceClient is a mock of CspInfoServiceClient interface.
type MockCspInfoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCspInfoServiceClientMockRecorder
}

// MockCspInfoServiceClientMockRecorder is the mock recorder for MockCspInfoServiceClient.
type MockCspInfoServiceClientMockRecorder struct {
	mock *MockCspInfoServiceClient
}

// NewMockCspInfoServiceClient creates a new mock instance.
func NewMockCspInfoServiceClient(ctrl *gomock.Controller) *MockCspInfoServiceClient {
	mock := &MockCspInfoServiceClient{ctrl: ctrl}
	mock.recorder = &MockCspInfoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCspInfoServiceClient) EXPECT() *MockCspInfoServiceClientMockRecorder {
	return m.recorder
}

// CreateCSPInfo mocks base method.
func (m *MockCspInfoServiceClient) CreateCSPInfo(ctx context.Context, in *tks_pb.CreateCSPInfoRequest, opts ...grpc.CallOption) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCSPInfo", varargs...)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCSPInfo indicates an expected call of CreateCSPInfo.
func (mr *MockCspInfoServiceClientMockRecorder) CreateCSPInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSPInfo", reflect.TypeOf((*MockCspInfoServiceClient)(nil).CreateCSPInfo), varargs...)
}

// GetCSPAuth mocks base method.
func (m *MockCspInfoServiceClient) GetCSPAuth(ctx context.Context, in *tks_pb.IDRequest, opts ...grpc.CallOption) (*tks_pb.GetCSPAuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPAuth", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetCSPAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPAuth indicates an expected call of GetCSPAuth.
func (mr *MockCspInfoServiceClientMockRecorder) GetCSPAuth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPAuth", reflect.TypeOf((*MockCspInfoServiceClient)(nil).GetCSPAuth), varargs...)
}

// GetCSPIDs mocks base method.
func (m *MockCspInfoServiceClient) GetCSPIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*tks_pb.IDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPIDs", varargs...)
	ret0, _ := ret[0].(*tks_pb.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDs indicates an expected call of GetCSPIDs.
func (mr *MockCspInfoServiceClientMockRecorder) GetCSPIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDs", reflect.TypeOf((*MockCspInfoServiceClient)(nil).GetCSPIDs), varargs...)
}

// GetCSPIDsByContractID mocks base method.
func (m *MockCspInfoServiceClient) GetCSPIDsByContractID(ctx context.Context, in *tks_pb.IDRequest, opts ...grpc.CallOption) (*tks_pb.IDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPIDsByContractID", varargs...)
	ret0, _ := ret[0].(*tks_pb.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDsByContractID indicates an expected call of GetCSPIDsByContractID.
func (mr *MockCspInfoServiceClientMockRecorder) GetCSPIDsByContractID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDsByContractID", reflect.TypeOf((*MockCspInfoServiceClient)(nil).GetCSPIDsByContractID), varargs...)
}

// GetCSPInfo mocks base method.
func (m *MockCspInfoServiceClient) GetCSPInfo(ctx context.Context, in *tks_pb.IDRequest, opts ...grpc.CallOption) (*tks_pb.GetCSPInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCSPInfo", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetCSPInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPInfo indicates an expected call of GetCSPInfo.
func (mr *MockCspInfoServiceClientMockRecorder) GetCSPInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPInfo", reflect.TypeOf((*MockCspInfoServiceClient)(nil).GetCSPInfo), varargs...)
}

// UpdateCSPAuth mocks base method.
func (m *MockCspInfoServiceClient) UpdateCSPAuth(ctx context.Context, in *tks_pb.UpdateCSPAuthRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCSPAuth", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCSPAuth indicates an expected call of UpdateCSPAuth.
func (mr *MockCspInfoServiceClientMockRecorder) UpdateCSPAuth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCSPAuth", reflect.TypeOf((*MockCspInfoServiceClient)(nil).UpdateCSPAuth), varargs...)
}

// MockCspInfoServiceServer is a mock of CspInfoServiceServer interface.
type MockCspInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCspInfoServiceServerMockRecorder
}

// MockCspInfoServiceServerMockRecorder is the mock recorder for MockCspInfoServiceServer.
type MockCspInfoServiceServerMockRecorder struct {
	mock *MockCspInfoServiceServer
}

// NewMockCspInfoServiceServer creates a new mock instance.
func NewMockCspInfoServiceServer(ctrl *gomock.Controller) *MockCspInfoServiceServer {
	mock := &MockCspInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockCspInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCspInfoServiceServer) EXPECT() *MockCspInfoServiceServerMockRecorder {
	return m.recorder
}

// CreateCSPInfo mocks base method.
func (m *MockCspInfoServiceServer) CreateCSPInfo(arg0 context.Context, arg1 *tks_pb.CreateCSPInfoRequest) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCSPInfo", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCSPInfo indicates an expected call of CreateCSPInfo.
func (mr *MockCspInfoServiceServerMockRecorder) CreateCSPInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSPInfo", reflect.TypeOf((*MockCspInfoServiceServer)(nil).CreateCSPInfo), arg0, arg1)
}

// GetCSPAuth mocks base method.
func (m *MockCspInfoServiceServer) GetCSPAuth(arg0 context.Context, arg1 *tks_pb.IDRequest) (*tks_pb.GetCSPAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPAuth", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetCSPAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPAuth indicates an expected call of GetCSPAuth.
func (mr *MockCspInfoServiceServerMockRecorder) GetCSPAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPAuth", reflect.TypeOf((*MockCspInfoServiceServer)(nil).GetCSPAuth), arg0, arg1)
}

// GetCSPIDs mocks base method.
func (m *MockCspInfoServiceServer) GetCSPIDs(arg0 context.Context, arg1 *emptypb.Empty) (*tks_pb.IDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPIDs", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDs indicates an expected call of GetCSPIDs.
func (mr *MockCspInfoServiceServerMockRecorder) GetCSPIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDs", reflect.TypeOf((*MockCspInfoServiceServer)(nil).GetCSPIDs), arg0, arg1)
}

// GetCSPIDsByContractID mocks base method.
func (m *MockCspInfoServiceServer) GetCSPIDsByContractID(arg0 context.Context, arg1 *tks_pb.IDRequest) (*tks_pb.IDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPIDsByContractID", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.IDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPIDsByContractID indicates an expected call of GetCSPIDsByContractID.
func (mr *MockCspInfoServiceServerMockRecorder) GetCSPIDsByContractID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIDsByContractID", reflect.TypeOf((*MockCspInfoServiceServer)(nil).GetCSPIDsByContractID), arg0, arg1)
}

// GetCSPInfo mocks base method.
func (m *MockCspInfoServiceServer) GetCSPInfo(arg0 context.Context, arg1 *tks_pb.IDRequest) (*tks_pb.GetCSPInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPInfo", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetCSPInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSPInfo indicates an expected call of GetCSPInfo.
func (mr *MockCspInfoServiceServerMockRecorder) GetCSPInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPInfo", reflect.TypeOf((*MockCspInfoServiceServer)(nil).GetCSPInfo), arg0, arg1)
}

// UpdateCSPAuth mocks base method.
func (m *MockCspInfoServiceServer) UpdateCSPAuth(arg0 context.Context, arg1 *tks_pb.UpdateCSPAuthRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCSPAuth", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCSPAuth indicates an expected call of UpdateCSPAuth.
func (mr *MockCspInfoServiceServerMockRecorder) UpdateCSPAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCSPAuth", reflect.TypeOf((*MockCspInfoServiceServer)(nil).UpdateCSPAuth), arg0, arg1)
}

// mustEmbedUnimplementedCspInfoServiceServer mocks base method.
func (m *MockCspInfoServiceServer) mustEmbedUnimplementedCspInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCspInfoServiceServer")
}

// mustEmbedUnimplementedCspInfoServiceServer indicates an expected call of mustEmbedUnimplementedCspInfoServiceServer.
func (mr *MockCspInfoServiceServerMockRecorder) mustEmbedUnimplementedCspInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCspInfoServiceServer", reflect.TypeOf((*MockCspInfoServiceServer)(nil).mustEmbedUnimplementedCspInfoServiceServer))
}

// MockUnsafeCspInfoServiceServer is a mock of UnsafeCspInfoServiceServer interface.
type MockUnsafeCspInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCspInfoServiceServerMockRecorder
}

// MockUnsafeCspInfoServiceServerMockRecorder is the mock recorder for MockUnsafeCspInfoServiceServer.
type MockUnsafeCspInfoServiceServerMockRecorder struct {
	mock *MockUnsafeCspInfoServiceServer
}

// NewMockUnsafeCspInfoServiceServer creates a new mock instance.
func NewMockUnsafeCspInfoServiceServer(ctrl *gomock.Controller) *MockUnsafeCspInfoServiceServer {
	mock := &MockUnsafeCspInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCspInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCspInfoServiceServer) EXPECT() *MockUnsafeCspInfoServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCspInfoServiceServer mocks base method.
func (m *MockUnsafeCspInfoServiceServer) mustEmbedUnimplementedCspInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCspInfoServiceServer")
}

// mustEmbedUnimplementedCspInfoServiceServer indicates an expected call of mustEmbedUnimplementedCspInfoServiceServer.
func (mr *MockUnsafeCspInfoServiceServerMockRecorder) mustEmbedUnimplementedCspInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCspInfoServiceServer", reflect.TypeOf((*MockUnsafeCspInfoServiceServer)(nil).mustEmbedUnimplementedCspInfoServiceServer))
}

// MockAppInfoServiceClient is a mock of AppInfoServiceClient interface.
type MockAppInfoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppInfoServiceClientMockRecorder
}

// MockAppInfoServiceClientMockRecorder is the mock recorder for MockAppInfoServiceClient.
type MockAppInfoServiceClientMockRecorder struct {
	mock *MockAppInfoServiceClient
}

// NewMockAppInfoServiceClient creates a new mock instance.
func NewMockAppInfoServiceClient(ctrl *gomock.Controller) *MockAppInfoServiceClient {
	mock := &MockAppInfoServiceClient{ctrl: ctrl}
	mock.recorder = &MockAppInfoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppInfoServiceClient) EXPECT() *MockAppInfoServiceClientMockRecorder {
	return m.recorder
}

// CreateAppGroup mocks base method.
func (m *MockAppInfoServiceClient) CreateAppGroup(ctx context.Context, in *tks_pb.CreateAppGroupRequest, opts ...grpc.CallOption) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppGroup", varargs...)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppGroup indicates an expected call of CreateAppGroup.
func (mr *MockAppInfoServiceClientMockRecorder) CreateAppGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppGroup", reflect.TypeOf((*MockAppInfoServiceClient)(nil).CreateAppGroup), varargs...)
}

// DeleteAppGroup mocks base method.
func (m *MockAppInfoServiceClient) DeleteAppGroup(ctx context.Context, in *tks_pb.DeleteAppGroupRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppGroup", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppGroup indicates an expected call of DeleteAppGroup.
func (mr *MockAppInfoServiceClientMockRecorder) DeleteAppGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppGroup", reflect.TypeOf((*MockAppInfoServiceClient)(nil).DeleteAppGroup), varargs...)
}

// GetAppGroup mocks base method.
func (m *MockAppInfoServiceClient) GetAppGroup(ctx context.Context, in *tks_pb.GetAppGroupRequest, opts ...grpc.CallOption) (*tks_pb.GetAppGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppGroup", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetAppGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroup indicates an expected call of GetAppGroup.
func (mr *MockAppInfoServiceClientMockRecorder) GetAppGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroup", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAppGroup), varargs...)
}

// GetAppGroups mocks base method.
func (m *MockAppInfoServiceClient) GetAppGroups(ctx context.Context, in *tks_pb.GetAppGroupsRequest, opts ...grpc.CallOption) (*tks_pb.GetAppGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppGroups", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetAppGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroups indicates an expected call of GetAppGroups.
func (mr *MockAppInfoServiceClientMockRecorder) GetAppGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroups", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAppGroups), varargs...)
}

// GetAppGroupsByClusterID mocks base method.
func (m *MockAppInfoServiceClient) GetAppGroupsByClusterID(ctx context.Context, in *tks_pb.IDRequest, opts ...grpc.CallOption) (*tks_pb.GetAppGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppGroupsByClusterID", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetAppGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroupsByClusterID indicates an expected call of GetAppGroupsByClusterID.
func (mr *MockAppInfoServiceClientMockRecorder) GetAppGroupsByClusterID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroupsByClusterID", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAppGroupsByClusterID), varargs...)
}

// GetApps mocks base method.
func (m *MockAppInfoServiceClient) GetApps(ctx context.Context, in *tks_pb.GetAppsRequest, opts ...grpc.CallOption) (*tks_pb.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApps", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockAppInfoServiceClientMockRecorder) GetApps(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetApps), varargs...)
}

// GetAppsByAppGroupID mocks base method.
func (m *MockAppInfoServiceClient) GetAppsByAppGroupID(ctx context.Context, in *tks_pb.IDRequest, opts ...grpc.CallOption) (*tks_pb.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppsByAppGroupID", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsByAppGroupID indicates an expected call of GetAppsByAppGroupID.
func (mr *MockAppInfoServiceClientMockRecorder) GetAppsByAppGroupID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsByAppGroupID", reflect.TypeOf((*MockAppInfoServiceClient)(nil).GetAppsByAppGroupID), varargs...)
}

// UpdateApp mocks base method.
func (m *MockAppInfoServiceClient) UpdateApp(ctx context.Context, in *tks_pb.UpdateAppRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApp", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockAppInfoServiceClientMockRecorder) UpdateApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockAppInfoServiceClient)(nil).UpdateApp), varargs...)
}

// UpdateAppGroupStatus mocks base method.
func (m *MockAppInfoServiceClient) UpdateAppGroupStatus(ctx context.Context, in *tks_pb.UpdateAppGroupStatusRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppGroupStatus", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppGroupStatus indicates an expected call of UpdateAppGroupStatus.
func (mr *MockAppInfoServiceClientMockRecorder) UpdateAppGroupStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppGroupStatus", reflect.TypeOf((*MockAppInfoServiceClient)(nil).UpdateAppGroupStatus), varargs...)
}

// MockAppInfoServiceServer is a mock of AppInfoServiceServer interface.
type MockAppInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAppInfoServiceServerMockRecorder
}

// MockAppInfoServiceServerMockRecorder is the mock recorder for MockAppInfoServiceServer.
type MockAppInfoServiceServerMockRecorder struct {
	mock *MockAppInfoServiceServer
}

// NewMockAppInfoServiceServer creates a new mock instance.
func NewMockAppInfoServiceServer(ctrl *gomock.Controller) *MockAppInfoServiceServer {
	mock := &MockAppInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockAppInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppInfoServiceServer) EXPECT() *MockAppInfoServiceServerMockRecorder {
	return m.recorder
}

// CreateAppGroup mocks base method.
func (m *MockAppInfoServiceServer) CreateAppGroup(arg0 context.Context, arg1 *tks_pb.CreateAppGroupRequest) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppGroup", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppGroup indicates an expected call of CreateAppGroup.
func (mr *MockAppInfoServiceServerMockRecorder) CreateAppGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppGroup", reflect.TypeOf((*MockAppInfoServiceServer)(nil).CreateAppGroup), arg0, arg1)
}

// DeleteAppGroup mocks base method.
func (m *MockAppInfoServiceServer) DeleteAppGroup(arg0 context.Context, arg1 *tks_pb.DeleteAppGroupRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppGroup", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppGroup indicates an expected call of DeleteAppGroup.
func (mr *MockAppInfoServiceServerMockRecorder) DeleteAppGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppGroup", reflect.TypeOf((*MockAppInfoServiceServer)(nil).DeleteAppGroup), arg0, arg1)
}

// GetAppGroup mocks base method.
func (m *MockAppInfoServiceServer) GetAppGroup(arg0 context.Context, arg1 *tks_pb.GetAppGroupRequest) (*tks_pb.GetAppGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppGroup", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetAppGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroup indicates an expected call of GetAppGroup.
func (mr *MockAppInfoServiceServerMockRecorder) GetAppGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroup", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAppGroup), arg0, arg1)
}

// GetAppGroups mocks base method.
func (m *MockAppInfoServiceServer) GetAppGroups(arg0 context.Context, arg1 *tks_pb.GetAppGroupsRequest) (*tks_pb.GetAppGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppGroups", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetAppGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroups indicates an expected call of GetAppGroups.
func (mr *MockAppInfoServiceServerMockRecorder) GetAppGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroups", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAppGroups), arg0, arg1)
}

// GetAppGroupsByClusterID mocks base method.
func (m *MockAppInfoServiceServer) GetAppGroupsByClusterID(arg0 context.Context, arg1 *tks_pb.IDRequest) (*tks_pb.GetAppGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppGroupsByClusterID", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetAppGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroupsByClusterID indicates an expected call of GetAppGroupsByClusterID.
func (mr *MockAppInfoServiceServerMockRecorder) GetAppGroupsByClusterID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroupsByClusterID", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAppGroupsByClusterID), arg0, arg1)
}

// GetApps mocks base method.
func (m *MockAppInfoServiceServer) GetApps(arg0 context.Context, arg1 *tks_pb.GetAppsRequest) (*tks_pb.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockAppInfoServiceServerMockRecorder) GetApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetApps), arg0, arg1)
}

// GetAppsByAppGroupID mocks base method.
func (m *MockAppInfoServiceServer) GetAppsByAppGroupID(arg0 context.Context, arg1 *tks_pb.IDRequest) (*tks_pb.GetAppsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppsByAppGroupID", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsByAppGroupID indicates an expected call of GetAppsByAppGroupID.
func (mr *MockAppInfoServiceServerMockRecorder) GetAppsByAppGroupID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsByAppGroupID", reflect.TypeOf((*MockAppInfoServiceServer)(nil).GetAppsByAppGroupID), arg0, arg1)
}

// UpdateApp mocks base method.
func (m *MockAppInfoServiceServer) UpdateApp(arg0 context.Context, arg1 *tks_pb.UpdateAppRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockAppInfoServiceServerMockRecorder) UpdateApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockAppInfoServiceServer)(nil).UpdateApp), arg0, arg1)
}

// UpdateAppGroupStatus mocks base method.
func (m *MockAppInfoServiceServer) UpdateAppGroupStatus(arg0 context.Context, arg1 *tks_pb.UpdateAppGroupStatusRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppGroupStatus", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppGroupStatus indicates an expected call of UpdateAppGroupStatus.
func (mr *MockAppInfoServiceServerMockRecorder) UpdateAppGroupStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppGroupStatus", reflect.TypeOf((*MockAppInfoServiceServer)(nil).UpdateAppGroupStatus), arg0, arg1)
}

// mustEmbedUnimplementedAppInfoServiceServer mocks base method.
func (m *MockAppInfoServiceServer) mustEmbedUnimplementedAppInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAppInfoServiceServer")
}

// mustEmbedUnimplementedAppInfoServiceServer indicates an expected call of mustEmbedUnimplementedAppInfoServiceServer.
func (mr *MockAppInfoServiceServerMockRecorder) mustEmbedUnimplementedAppInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAppInfoServiceServer", reflect.TypeOf((*MockAppInfoServiceServer)(nil).mustEmbedUnimplementedAppInfoServiceServer))
}

// MockUnsafeAppInfoServiceServer is a mock of UnsafeAppInfoServiceServer interface.
type MockUnsafeAppInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAppInfoServiceServerMockRecorder
}

// MockUnsafeAppInfoServiceServerMockRecorder is the mock recorder for MockUnsafeAppInfoServiceServer.
type MockUnsafeAppInfoServiceServerMockRecorder struct {
	mock *MockUnsafeAppInfoServiceServer
}

// NewMockUnsafeAppInfoServiceServer creates a new mock instance.
func NewMockUnsafeAppInfoServiceServer(ctrl *gomock.Controller) *MockUnsafeAppInfoServiceServer {
	mock := &MockUnsafeAppInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAppInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAppInfoServiceServer) EXPECT() *MockUnsafeAppInfoServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAppInfoServiceServer mocks base method.
func (m *MockUnsafeAppInfoServiceServer) mustEmbedUnimplementedAppInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAppInfoServiceServer")
}

// mustEmbedUnimplementedAppInfoServiceServer indicates an expected call of mustEmbedUnimplementedAppInfoServiceServer.
func (mr *MockUnsafeAppInfoServiceServerMockRecorder) mustEmbedUnimplementedAppInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAppInfoServiceServer", reflect.TypeOf((*MockUnsafeAppInfoServiceServer)(nil).mustEmbedUnimplementedAppInfoServiceServer))
}

// MockAppServeAppServiceClient is a mock of AppServeAppServiceClient interface.
type MockAppServeAppServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppServeAppServiceClientMockRecorder
}

// MockAppServeAppServiceClientMockRecorder is the mock recorder for MockAppServeAppServiceClient.
type MockAppServeAppServiceClientMockRecorder struct {
	mock *MockAppServeAppServiceClient
}

// NewMockAppServeAppServiceClient creates a new mock instance.
func NewMockAppServeAppServiceClient(ctrl *gomock.Controller) *MockAppServeAppServiceClient {
	mock := &MockAppServeAppServiceClient{ctrl: ctrl}
	mock.recorder = &MockAppServeAppServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppServeAppServiceClient) EXPECT() *MockAppServeAppServiceClientMockRecorder {
	return m.recorder
}

// CreateAppServeApp mocks base method.
func (m *MockAppServeAppServiceClient) CreateAppServeApp(ctx context.Context, in *tks_pb.CreateAppServeAppRequest, opts ...grpc.CallOption) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppServeApp", varargs...)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppServeApp indicates an expected call of CreateAppServeApp.
func (mr *MockAppServeAppServiceClientMockRecorder) CreateAppServeApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppServeApp", reflect.TypeOf((*MockAppServeAppServiceClient)(nil).CreateAppServeApp), varargs...)
}

// GetAppServeApp mocks base method.
func (m *MockAppServeAppServiceClient) GetAppServeApp(ctx context.Context, in *tks_pb.GetAppServeAppRequest, opts ...grpc.CallOption) (*tks_pb.GetAppServeAppResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppServeApp", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetAppServeAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppServeApp indicates an expected call of GetAppServeApp.
func (mr *MockAppServeAppServiceClientMockRecorder) GetAppServeApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppServeApp", reflect.TypeOf((*MockAppServeAppServiceClient)(nil).GetAppServeApp), varargs...)
}

// GetAppServeApps mocks base method.
func (m *MockAppServeAppServiceClient) GetAppServeApps(ctx context.Context, in *tks_pb.GetAppServeAppsRequest, opts ...grpc.CallOption) (*tks_pb.GetAppServeAppsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppServeApps", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetAppServeAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppServeApps indicates an expected call of GetAppServeApps.
func (mr *MockAppServeAppServiceClientMockRecorder) GetAppServeApps(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppServeApps", reflect.TypeOf((*MockAppServeAppServiceClient)(nil).GetAppServeApps), varargs...)
}

// UpdateAppServeApp mocks base method.
func (m *MockAppServeAppServiceClient) UpdateAppServeApp(ctx context.Context, in *tks_pb.UpdateAppServeAppRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppServeApp", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppServeApp indicates an expected call of UpdateAppServeApp.
func (mr *MockAppServeAppServiceClientMockRecorder) UpdateAppServeApp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppServeApp", reflect.TypeOf((*MockAppServeAppServiceClient)(nil).UpdateAppServeApp), varargs...)
}

// UpdateAppServeAppEndpoint mocks base method.
func (m *MockAppServeAppServiceClient) UpdateAppServeAppEndpoint(ctx context.Context, in *tks_pb.UpdateAppServeAppEndpointRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppServeAppEndpoint", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppServeAppEndpoint indicates an expected call of UpdateAppServeAppEndpoint.
func (mr *MockAppServeAppServiceClientMockRecorder) UpdateAppServeAppEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppServeAppEndpoint", reflect.TypeOf((*MockAppServeAppServiceClient)(nil).UpdateAppServeAppEndpoint), varargs...)
}

// UpdateAppServeAppStatus mocks base method.
func (m *MockAppServeAppServiceClient) UpdateAppServeAppStatus(ctx context.Context, in *tks_pb.UpdateAppServeAppStatusRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppServeAppStatus", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppServeAppStatus indicates an expected call of UpdateAppServeAppStatus.
func (mr *MockAppServeAppServiceClientMockRecorder) UpdateAppServeAppStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppServeAppStatus", reflect.TypeOf((*MockAppServeAppServiceClient)(nil).UpdateAppServeAppStatus), varargs...)
}

// MockAppServeAppServiceServer is a mock of AppServeAppServiceServer interface.
type MockAppServeAppServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAppServeAppServiceServerMockRecorder
}

// MockAppServeAppServiceServerMockRecorder is the mock recorder for MockAppServeAppServiceServer.
type MockAppServeAppServiceServerMockRecorder struct {
	mock *MockAppServeAppServiceServer
}

// NewMockAppServeAppServiceServer creates a new mock instance.
func NewMockAppServeAppServiceServer(ctrl *gomock.Controller) *MockAppServeAppServiceServer {
	mock := &MockAppServeAppServiceServer{ctrl: ctrl}
	mock.recorder = &MockAppServeAppServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppServeAppServiceServer) EXPECT() *MockAppServeAppServiceServerMockRecorder {
	return m.recorder
}

// CreateAppServeApp mocks base method.
func (m *MockAppServeAppServiceServer) CreateAppServeApp(arg0 context.Context, arg1 *tks_pb.CreateAppServeAppRequest) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppServeApp", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppServeApp indicates an expected call of CreateAppServeApp.
func (mr *MockAppServeAppServiceServerMockRecorder) CreateAppServeApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppServeApp", reflect.TypeOf((*MockAppServeAppServiceServer)(nil).CreateAppServeApp), arg0, arg1)
}

// GetAppServeApp mocks base method.
func (m *MockAppServeAppServiceServer) GetAppServeApp(arg0 context.Context, arg1 *tks_pb.GetAppServeAppRequest) (*tks_pb.GetAppServeAppResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppServeApp", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetAppServeAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppServeApp indicates an expected call of GetAppServeApp.
func (mr *MockAppServeAppServiceServerMockRecorder) GetAppServeApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppServeApp", reflect.TypeOf((*MockAppServeAppServiceServer)(nil).GetAppServeApp), arg0, arg1)
}

// GetAppServeApps mocks base method.
func (m *MockAppServeAppServiceServer) GetAppServeApps(arg0 context.Context, arg1 *tks_pb.GetAppServeAppsRequest) (*tks_pb.GetAppServeAppsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppServeApps", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetAppServeAppsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppServeApps indicates an expected call of GetAppServeApps.
func (mr *MockAppServeAppServiceServerMockRecorder) GetAppServeApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppServeApps", reflect.TypeOf((*MockAppServeAppServiceServer)(nil).GetAppServeApps), arg0, arg1)
}

// UpdateAppServeApp mocks base method.
func (m *MockAppServeAppServiceServer) UpdateAppServeApp(arg0 context.Context, arg1 *tks_pb.UpdateAppServeAppRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppServeApp", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppServeApp indicates an expected call of UpdateAppServeApp.
func (mr *MockAppServeAppServiceServerMockRecorder) UpdateAppServeApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppServeApp", reflect.TypeOf((*MockAppServeAppServiceServer)(nil).UpdateAppServeApp), arg0, arg1)
}

// UpdateAppServeAppEndpoint mocks base method.
func (m *MockAppServeAppServiceServer) UpdateAppServeAppEndpoint(arg0 context.Context, arg1 *tks_pb.UpdateAppServeAppEndpointRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppServeAppEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppServeAppEndpoint indicates an expected call of UpdateAppServeAppEndpoint.
func (mr *MockAppServeAppServiceServerMockRecorder) UpdateAppServeAppEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppServeAppEndpoint", reflect.TypeOf((*MockAppServeAppServiceServer)(nil).UpdateAppServeAppEndpoint), arg0, arg1)
}

// UpdateAppServeAppStatus mocks base method.
func (m *MockAppServeAppServiceServer) UpdateAppServeAppStatus(arg0 context.Context, arg1 *tks_pb.UpdateAppServeAppStatusRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppServeAppStatus", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppServeAppStatus indicates an expected call of UpdateAppServeAppStatus.
func (mr *MockAppServeAppServiceServerMockRecorder) UpdateAppServeAppStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppServeAppStatus", reflect.TypeOf((*MockAppServeAppServiceServer)(nil).UpdateAppServeAppStatus), arg0, arg1)
}

// mustEmbedUnimplementedAppServeAppServiceServer mocks base method.
func (m *MockAppServeAppServiceServer) mustEmbedUnimplementedAppServeAppServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAppServeAppServiceServer")
}

// mustEmbedUnimplementedAppServeAppServiceServer indicates an expected call of mustEmbedUnimplementedAppServeAppServiceServer.
func (mr *MockAppServeAppServiceServerMockRecorder) mustEmbedUnimplementedAppServeAppServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAppServeAppServiceServer", reflect.TypeOf((*MockAppServeAppServiceServer)(nil).mustEmbedUnimplementedAppServeAppServiceServer))
}

// MockUnsafeAppServeAppServiceServer is a mock of UnsafeAppServeAppServiceServer interface.
type MockUnsafeAppServeAppServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAppServeAppServiceServerMockRecorder
}

// MockUnsafeAppServeAppServiceServerMockRecorder is the mock recorder for MockUnsafeAppServeAppServiceServer.
type MockUnsafeAppServeAppServiceServerMockRecorder struct {
	mock *MockUnsafeAppServeAppServiceServer
}

// NewMockUnsafeAppServeAppServiceServer creates a new mock instance.
func NewMockUnsafeAppServeAppServiceServer(ctrl *gomock.Controller) *MockUnsafeAppServeAppServiceServer {
	mock := &MockUnsafeAppServeAppServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAppServeAppServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAppServeAppServiceServer) EXPECT() *MockUnsafeAppServeAppServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAppServeAppServiceServer mocks base method.
func (m *MockUnsafeAppServeAppServiceServer) mustEmbedUnimplementedAppServeAppServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAppServeAppServiceServer")
}

// mustEmbedUnimplementedAppServeAppServiceServer indicates an expected call of mustEmbedUnimplementedAppServeAppServiceServer.
func (mr *MockUnsafeAppServeAppServiceServerMockRecorder) mustEmbedUnimplementedAppServeAppServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAppServeAppServiceServer", reflect.TypeOf((*MockUnsafeAppServeAppServiceServer)(nil).mustEmbedUnimplementedAppServeAppServiceServer))
}

// MockKeycloakInfoServiceClient is a mock of KeycloakInfoServiceClient interface.
type MockKeycloakInfoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeycloakInfoServiceClientMockRecorder
}

// MockKeycloakInfoServiceClientMockRecorder is the mock recorder for MockKeycloakInfoServiceClient.
type MockKeycloakInfoServiceClientMockRecorder struct {
	mock *MockKeycloakInfoServiceClient
}

// NewMockKeycloakInfoServiceClient creates a new mock instance.
func NewMockKeycloakInfoServiceClient(ctrl *gomock.Controller) *MockKeycloakInfoServiceClient {
	mock := &MockKeycloakInfoServiceClient{ctrl: ctrl}
	mock.recorder = &MockKeycloakInfoServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycloakInfoServiceClient) EXPECT() *MockKeycloakInfoServiceClientMockRecorder {
	return m.recorder
}

// CreateKeycloakInfo mocks base method.
func (m *MockKeycloakInfoServiceClient) CreateKeycloakInfo(ctx context.Context, in *tks_pb.CreateKeycloakInfoRequest, opts ...grpc.CallOption) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKeycloakInfo", varargs...)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeycloakInfo indicates an expected call of CreateKeycloakInfo.
func (mr *MockKeycloakInfoServiceClientMockRecorder) CreateKeycloakInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeycloakInfo", reflect.TypeOf((*MockKeycloakInfoServiceClient)(nil).CreateKeycloakInfo), varargs...)
}

// DeleteKeycloakInfo mocks base method.
func (m *MockKeycloakInfoServiceClient) DeleteKeycloakInfo(ctx context.Context, in *tks_pb.IDRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKeycloakInfo", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeycloakInfo indicates an expected call of DeleteKeycloakInfo.
func (mr *MockKeycloakInfoServiceClientMockRecorder) DeleteKeycloakInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeycloakInfo", reflect.TypeOf((*MockKeycloakInfoServiceClient)(nil).DeleteKeycloakInfo), varargs...)
}

// GetKeycloakInfoByClusterId mocks base method.
func (m *MockKeycloakInfoServiceClient) GetKeycloakInfoByClusterId(ctx context.Context, in *tks_pb.IDRequest, opts ...grpc.CallOption) (*tks_pb.GetKeycloakInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeycloakInfoByClusterId", varargs...)
	ret0, _ := ret[0].(*tks_pb.GetKeycloakInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeycloakInfoByClusterId indicates an expected call of GetKeycloakInfoByClusterId.
func (mr *MockKeycloakInfoServiceClientMockRecorder) GetKeycloakInfoByClusterId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeycloakInfoByClusterId", reflect.TypeOf((*MockKeycloakInfoServiceClient)(nil).GetKeycloakInfoByClusterId), varargs...)
}

// UpdateKeycloakInfo mocks base method.
func (m *MockKeycloakInfoServiceClient) UpdateKeycloakInfo(ctx context.Context, in *tks_pb.IDRequest, opts ...grpc.CallOption) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKeycloakInfo", varargs...)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeycloakInfo indicates an expected call of UpdateKeycloakInfo.
func (mr *MockKeycloakInfoServiceClientMockRecorder) UpdateKeycloakInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeycloakInfo", reflect.TypeOf((*MockKeycloakInfoServiceClient)(nil).UpdateKeycloakInfo), varargs...)
}

// MockKeycloakInfoServiceServer is a mock of KeycloakInfoServiceServer interface.
type MockKeycloakInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockKeycloakInfoServiceServerMockRecorder
}

// MockKeycloakInfoServiceServerMockRecorder is the mock recorder for MockKeycloakInfoServiceServer.
type MockKeycloakInfoServiceServerMockRecorder struct {
	mock *MockKeycloakInfoServiceServer
}

// NewMockKeycloakInfoServiceServer creates a new mock instance.
func NewMockKeycloakInfoServiceServer(ctrl *gomock.Controller) *MockKeycloakInfoServiceServer {
	mock := &MockKeycloakInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockKeycloakInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycloakInfoServiceServer) EXPECT() *MockKeycloakInfoServiceServerMockRecorder {
	return m.recorder
}

// CreateKeycloakInfo mocks base method.
func (m *MockKeycloakInfoServiceServer) CreateKeycloakInfo(arg0 context.Context, arg1 *tks_pb.CreateKeycloakInfoRequest) (*tks_pb.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeycloakInfo", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeycloakInfo indicates an expected call of CreateKeycloakInfo.
func (mr *MockKeycloakInfoServiceServerMockRecorder) CreateKeycloakInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeycloakInfo", reflect.TypeOf((*MockKeycloakInfoServiceServer)(nil).CreateKeycloakInfo), arg0, arg1)
}

// DeleteKeycloakInfo mocks base method.
func (m *MockKeycloakInfoServiceServer) DeleteKeycloakInfo(arg0 context.Context, arg1 *tks_pb.IDRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeycloakInfo", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeycloakInfo indicates an expected call of DeleteKeycloakInfo.
func (mr *MockKeycloakInfoServiceServerMockRecorder) DeleteKeycloakInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeycloakInfo", reflect.TypeOf((*MockKeycloakInfoServiceServer)(nil).DeleteKeycloakInfo), arg0, arg1)
}

// GetKeycloakInfoByClusterId mocks base method.
func (m *MockKeycloakInfoServiceServer) GetKeycloakInfoByClusterId(arg0 context.Context, arg1 *tks_pb.IDRequest) (*tks_pb.GetKeycloakInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeycloakInfoByClusterId", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.GetKeycloakInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeycloakInfoByClusterId indicates an expected call of GetKeycloakInfoByClusterId.
func (mr *MockKeycloakInfoServiceServerMockRecorder) GetKeycloakInfoByClusterId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeycloakInfoByClusterId", reflect.TypeOf((*MockKeycloakInfoServiceServer)(nil).GetKeycloakInfoByClusterId), arg0, arg1)
}

// UpdateKeycloakInfo mocks base method.
func (m *MockKeycloakInfoServiceServer) UpdateKeycloakInfo(arg0 context.Context, arg1 *tks_pb.IDRequest) (*tks_pb.SimpleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeycloakInfo", arg0, arg1)
	ret0, _ := ret[0].(*tks_pb.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeycloakInfo indicates an expected call of UpdateKeycloakInfo.
func (mr *MockKeycloakInfoServiceServerMockRecorder) UpdateKeycloakInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeycloakInfo", reflect.TypeOf((*MockKeycloakInfoServiceServer)(nil).UpdateKeycloakInfo), arg0, arg1)
}

// mustEmbedUnimplementedKeycloakInfoServiceServer mocks base method.
func (m *MockKeycloakInfoServiceServer) mustEmbedUnimplementedKeycloakInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeycloakInfoServiceServer")
}

// mustEmbedUnimplementedKeycloakInfoServiceServer indicates an expected call of mustEmbedUnimplementedKeycloakInfoServiceServer.
func (mr *MockKeycloakInfoServiceServerMockRecorder) mustEmbedUnimplementedKeycloakInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeycloakInfoServiceServer", reflect.TypeOf((*MockKeycloakInfoServiceServer)(nil).mustEmbedUnimplementedKeycloakInfoServiceServer))
}

// MockUnsafeKeycloakInfoServiceServer is a mock of UnsafeKeycloakInfoServiceServer interface.
type MockUnsafeKeycloakInfoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeKeycloakInfoServiceServerMockRecorder
}

// MockUnsafeKeycloakInfoServiceServerMockRecorder is the mock recorder for MockUnsafeKeycloakInfoServiceServer.
type MockUnsafeKeycloakInfoServiceServerMockRecorder struct {
	mock *MockUnsafeKeycloakInfoServiceServer
}

// NewMockUnsafeKeycloakInfoServiceServer creates a new mock instance.
func NewMockUnsafeKeycloakInfoServiceServer(ctrl *gomock.Controller) *MockUnsafeKeycloakInfoServiceServer {
	mock := &MockUnsafeKeycloakInfoServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeKeycloakInfoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeKeycloakInfoServiceServer) EXPECT() *MockUnsafeKeycloakInfoServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedKeycloakInfoServiceServer mocks base method.
func (m *MockUnsafeKeycloakInfoServiceServer) mustEmbedUnimplementedKeycloakInfoServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKeycloakInfoServiceServer")
}

// mustEmbedUnimplementedKeycloakInfoServiceServer indicates an expected call of mustEmbedUnimplementedKeycloakInfoServiceServer.
func (mr *MockUnsafeKeycloakInfoServiceServerMockRecorder) mustEmbedUnimplementedKeycloakInfoServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKeycloakInfoServiceServer", reflect.TypeOf((*MockUnsafeKeycloakInfoServiceServer)(nil).mustEmbedUnimplementedKeycloakInfoServiceServer))
}
